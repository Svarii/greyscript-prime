{
  "numbers: div": {
    "prefix": "num_div",
    "scope": "greyscript",
    "description": "Insert div (full, with header).",
    "body": [
      "      ",
      "",
      "        //  **Description:**",
      "        //  ",
      "        //  @description     ",
      "        ",
      "        //  ",
      "        ",
      "// Divide a number",
      "    // @description **Description:**",
      "    // @description Divide 2 from the number or optional amount",
      "\t// @description",
      "\t//",
      "\t// @description **Parameters:**",
      "    // @param {number} [amount] - The amount to div by",
      "    // @description - `amount` The amount to div by",
      "    //",
      "\t// @description **Parameter Defaults:**",
      "    // @description - `distanceTo`:`0`",
      "    // @description",
      "    //",
      "\t// @description **Return:**",
      "\t// @return {number} - The result of the division",
      "\t// @description `number` The result of the division",
      "\t// @description",
      "\t//",
      "\t// @description **Author:** Svarii",
      "\t// @description **Version:** 0.0.1",
      "\t// @description",
      "\t//",
      "\t// @example myNumber = 42",
      "    // @example",
      "    // print myNumber.div // Return 21",
      "    // @example",
      "    // print myNumber.div(21) // Return 2",
      "    // @example",
      "    // print myNumber.div(0) // Return 0",
      "\t// @description      ",
      "number.div = function(amount = 2)",
      "    if typeof(locals.amount) == \"number\" then",
      "        if locals.amount == 0 then return 0",
      "    end if",
      "        return self / locals.amount",
      "end function   ",
      "// @startuml",
      "// title <color:purple>number.div Method Diagram</color>",
      "// ",
      "// class number {",
      "//   + value : number",
      "//   + div(divisor: number) : number",
      "// }",
      "// ",
      "// note right of number",
      "//   The div method divides the current value by the provided divisor.",
      "//   For example:",
      "//     \u2022 44.div(2) returns 22",
      "//     \u2022 44.div(4) returns 11",
      "// end note",
      "// ",
      "// footer",
      "// Method: number.div(divisor)",
      "// endfooter",
      "// ",
      "// @enduml"
    ]
  },
  "numbers: is_float": {
    "prefix": "num_is_float",
    "scope": "greyscript",
    "description": "Insert is_float (full, with header).",
    "body": [
      "// Checks if the number is a floating-point number (contains a decimal point)",
      "// @description **Description:**",
      "// @description Returns `true` if the number contains a decimal point, otherwise `false`.",
      "// @description",
      "//",
      "// @description **Parameters:**",
      "// @description - None",
      "//",
      "// @description **Parameter Defaults:**",
      "// @description - None",
      "// @description",
      "//",
      "// @description **Return:**",
      "// @return {boolean}",
      "// @description `true` if number is float, else `false`.",
      "// @description",
      "//",
      "// @description **Author:** Svarii",
      "// @description **Version:** 0.0.1",
      "// @description",
      "//",
      "// @example",
      "// print (42).is_float()    // false",
      "// @example",
      "// print (3.14).is_float()  // true",
      "number.is_float = function()",
      "\tif str(self).indexOf(\".\") > 0 then return true",
      "    return false",
      "end function"
    ]
  },
  "numbers: is_integer": {
    "prefix": "num_is_integer",
    "scope": "greyscript",
    "description": "Insert is_integer (full, with header).",
    "body": [
      "// Checks if the number is an integer",
      "// @description **Description:**",
      "// @description Returns `true` if the number is an integer, otherwise `false`.",
      "// @description",
      "//",
      "// @description **Parameters:**",
      "// @description - None",
      "//",
      "// @description **Parameter Defaults:**",
      "// @description - None",
      "// @description",
      "//",
      "// @description **Return:**",
      "// @return {boolean}",
      "// @description `true` if number is integer, else `false`.",
      "// @description",
      "//",
      "// @description **Author:** Svarii",
      "// @description **Version:** 0.0.1",
      "// @description",
      "//",
      "// @example",
      "// print (420).is_integer()    // true",
      "// @example",
      "// print (1.618).is_integer()  // false",
      "number.is_integer = function()",
      "\tif not self == round(self) then return false",
      "    return true",
      "end function"
    ]
  },
  "numbers: is_less": {
    "prefix": "num_is_less",
    "scope": "greyscript",
    "description": "Insert is_less (full, with header).",
    "body": [
      "// Checks if the number is lesser than the provided number",
      "// @description **Description:**",
      "// @description Returns `true` if the number is less than the provided amount, otherwise `false`.",
      "// @description ---",
      "//",
      "// @description **Parameters:**",
      "// @param {number} amount - The number to compare against.",
      "// @description",
      "//",
      "// @description **Return:**",
      "// @return {boolean} `true` if the number is less than `amount`, else `false`.",
      "// @description",
      "//",
      "// @description **Author:** Svarii",
      "// @description **Version:** 0.0.1",
      "// @description",
      "//",
      "// @example myNumber = 42",
      "// @example myNumber2 = 100",
      "// @example",
      "// result = myNumber.is_less(myNumber2)",
      "// @example",
      "// print(result) // Outputs: true",
      "    number.is_less = function(is_less)",
      "            if locals.is_less < self then return true",
      "            return false",
      "    end function",
      "",
      "    ",
      "",
      "    //@name is_less   ",
      "        //  * @startuml",
      "        //  * entity NumberObject",
      "        //  * control \".lesser_than\" as lesser_than",
      "        //  *   NumberObject -> lesser_than : number",
      "        //  *   lesser_than -> NumberObject : [true / false]     ",
      "        //  * footer",
      "        //  *   number.lesser_than",
      "        //  * endfooter         ",
      "        //  * @enduml "
    ]
  },
  "numbers: is_more": {
    "prefix": "num_is_more",
    "scope": "greyscript",
    "description": "Insert is_more (full, with header).",
    "body": [
      "",
      "",
      "        //  **Description:**",
      "        //  Check if number is greater than provided number",
      "        //  @param {number} is_more",
      "        //  @return {true<bool> | false<bool>} - The result of the subtraction.",
      "        //  @example myNumber = 42;",
      "        //  @example myNumber2 = 100;",
      "        //  @example ",
      "        //  @example result = newNumber.is_more(myNumber2);",
      "        //  @example        ",
      "        //  print(result); // Outputs: false",
      "    number.is_more = function(is_more)",
      "            if locals.is_more > self then return true",
      "            return false",
      "    end function",
      "    //@name is_more   ",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity NumberObject",
      "        //  * control \".greater_than\" as greater_than",
      "        //  * NumberObject -> greater_than : number",
      "        //  * greater_than -> NumberObject : [true / false]     ",
      "        //  * footer",
      "        //  * number.greater_than",
      "        //  * endfooter         ",
      "        //  * @enduml     "
    ]
  },
  "numbers: is_negative": {
    "prefix": "num_is_negative",
    "scope": "greyscript",
    "description": "Insert is_negative (full, with header).",
    "body": [
      "//  **Description:**",
      "//  Checks if the number is negative.",
      "//  @return {boolean} - Returns `true` if the number is less than zero, otherwise `false`.",
      "//  @example num = -10",
      "//  @example result = num.is_negative",
      "//  @example print(result)  // Outputs: true",
      "//  @example",
      "//  @example num2 = 5",
      "//  @example result2 = num2.is_negative",
      "//  @example print(result2) // Outputs: false",
      "number.is_negative = function()",
      "    if self < 0 then return true",
      "    return false",
      "end function"
    ]
  },
  "numbers: is_positive": {
    "prefix": "num_is_positive",
    "scope": "greyscript",
    "description": "Insert is_positive (full, with header).",
    "body": [
      "// @startuml",
      "// title number.is_positive()",
      "//",
      "// participant Caller",
      "// participant number",
      "//",
      "// Caller -> number: call is_positive()",
      "// activate number",
      "//",
      "// number -> number: if self >= 0 then return true",
      "//",
      "// number --> Caller: return true or false",
      "// deactivate number",
      "// @enduml",
      "",
      "",
      "//  **Description:**",
      "//  Checks if the number is positive (including zero).",
      "//  @return {boolean} - Returns `true` if the number is greater than or equal to zero, otherwise `false`.",
      "//  @example num = 10",
      "//  @example result = num.is_positive",
      "//  @example print(result)  // Outputs: true",
      "//  @example",
      "//  @example num2 = -5",
      "//  @example result2 = num2.is_positive",
      "//  @example print(result2) // Outputs: false",
      "number.is_positive = function()",
      "    if self >= 0 then return true",
      "    return false",
      "end function",
      ""
    ]
  },
  "numbers: is_zero": {
    "prefix": "num_is_zero",
    "scope": "greyscript",
    "description": "Insert is_zero (full, with header).",
    "body": [
      "// @startuml",
      "// title number.is_zero()",
      "//",
      "// participant Caller",
      "// participant number",
      "//",
      "// Caller -> number: call is_zero()",
      "// activate number",
      "//",
      "// number -> number: if self == 0 then return true",
      "//",
      "// number --> Caller: return true or false",
      "// deactivate number",
      "// @enduml",
      "",
      "//  **Description:**",
      "//  Checks if the number is zero.",
      "//  @description Returns `true` if the number is exactly zero, otherwise returns `false`.",
      "//  @param *(none)*",
      "//  @return {boolean} - `true` if the number is zero, otherwise `false`.",
      "//  @example myNumber = 0",
      "//  @example result = myNumber.is_zero",
      "//  @example",
      "//  print(result) // Outputs: true",
      "number.is_zero = function()",
      "    if self == 0 then return true",
      "    return false",
      "end function"
    ]
  },
  "numbers: clamp": {
    "prefix": "num_clamp",
    "scope": "greyscript",
    "description": "Insert clamp (full, with header).",
    "body": [
      "// Keeps a number within a specified range",
      "\t// @description **Description:**",
      "\t// @description Ensure an number stays between a minimim and maximum value",
      "\t// @description",
      "\t//",
      "\t// @description **Parameters:**",
      "    // @param {number} min - The min threshold.",
      "    // @param {number} max - The max threshold.    ",
      "\t// @description - `min` The min threshold.",
      "    // @description - `max` The max threshold.",
      "    //",
      "\t// @description **Parameter Defaults:**",
      "    // @description - none",
      "    // @description",
      "    //",
      "\t// @description **Return:**",
      "\t// @return {number} he result of the clamp",
      "\t// @description `number`",
      "\t// @description",
      "\t//",
      "\t// @description **Author:** Svarii",
      "\t// @description **Version:** 0.0.1",
      "\t// @description",
      "\t//",
      "\t// @example myNumber = 42",
      "\t// @example",
      "    // print myNumber.clamp(42, 100) // Return 42",
      "\t// print myNumber.clamp(75, 100) // Return 75",
      "    // print myNumber.clamp(0, 40) // Return 40",
      "number.clamp = function(min, max)",
      "            if self < locals.min then return locals.min",
      "            if self > locals.max then return locals.max",
      "            return self",
      "end function",
      "// @startuml",
      "// title <color:purple>number.clamp Method Diagram</color>",
      "//",
      "// class NumberObject {",
      "//   + value : number",
      "//   + clamp(min: number, max: number) : number",
      "// }",
      "//",
      "// note bottom of NumberObject",
      "//   Limits the object's value within the specified range.",
      "//   Usage examples:",
      "//     \u2022 7.clamp(2, 6) \u2192 6  (value exceeds max; clamped to 6)",
      "//     \u2022 1.clamp(2, 6) \u2192 2  (value below min; clamped to 2)",
      "// end note",
      "//",
      "// @enduml"
    ]
  },
  "numbers: diff": {
    "prefix": "num_diff",
    "scope": "greyscript",
    "description": "Insert diff (full, with header).",
    "body": [
      "    //@name diff",
      "// @startuml",
      "// title <color:purple>number.diff Method Diagram</color>",
      "// ",
      "// class number {",
      "//   + value : number",
      "//   + diff(number) : number",
      "// }",
      "// ",
      "// note right of number",
      "//   The diff method subtracts the provided value from the current number.",
      "//   For example: 44.diff(2) returns 42.",
      "// end note",
      "// ",
      "// footer",
      "// Method: number.diff(subtrahend)",
      "// endfooter",
      "// ",
      "// @enduml",
      "",
      "// Return difference to number",
      "        // @description **Description:**",
      "\t// @description The difference between number and provided number",
      "\t// @description ---",
      "\t//",
      "\t// @description **Parameters:**",
      "        // @param {number} distanceTo - The value to compare",
      "        // @description - `distanceTo` The value to compare",
      "        //",
      "\t// @description **Parameter Defaults:**",
      "        // @description - `distanceTo`:`0`",
      "        // @description ---",
      "        //",
      "\t// @description **Return:**",
      "\t// @return {number} the difference between the numbers",
      "\t// @description `number` difference between numbers",
      "\t// @description ---",
      "\t//",
      "\t// @description **Author:** Svarii",
      "\t// @description **Version:** 0.0.1",
      "\t// @description ---",
      "\t//",
      "\t// @example myNumber = 42",
      "        // @example",
      "        // print myNumber.diff(42, 100) // Return 57",
      "        // @example",
      "        // print myNumber.diff(75, 100) // Return 25",
      "        // @example",
      "        // print myNumber.diff(0, 40) // Return 40",
      "\t// @description ---",
      "    number.diff = function(distanceTo = 0)",
      "            return abs(self - locals.distanceTo)",
      "    end function"
    ]
  },
  "numbers: minus": {
    "prefix": "num_minus",
    "scope": "greyscript",
    "description": "Insert minus (full, with header).",
    "body": [
      "// @startuml",
      "// title number.minus(amount=1)",
      "//",
      "// participant Caller",
      "// participant number",
      "//",
      "// Caller -> number: call minus(amount=1)",
      "// activate number",
      "//",
      "// note right: locals.amount = amount (default 1)",
      "//",
      "// number --> number: calculate subtraction\\nself - locals.amount",
      "// number --> Caller: return result",
      "// deactivate number",
      "// @enduml     ",
      "",
      "        //  **Description:**",
      "        //  Subtract 1 from the number or optional amount",
      "        //  @description     ",
      "        //  @param {number} [amount] - The amount to add.",
      "        //  @return {number} - The result of the subtraction.",
      "        //  @example newNumber = 44",
      "        //  @example ",
      "        //  @example result = newNumber.minus(2)",
      "        //  @example        ",
      "        //  print(result); // Output: 42",
      "    number.minus = function(amount = 1)",
      "            return self - locals.amount",
      "    end function"
    ]
  },
  "numbers: multiply": {
    "prefix": "num_multiply",
    "scope": "greyscript",
    "description": "Insert multiply (full, with header).",
    "body": [
      "// @startuml",
      "// title number.multiply(amount=2)",
      "//",
      "// participant Caller",
      "// participant number",
      "//",
      "// Caller -> number: call multiply(amount=2)",
      "// activate number",
      "//",
      "// note right: locals.amount = amount (default 2)",
      "//",
      "// number --> Caller: return self * locals.amount",
      "// deactivate number",
      "// @enduml",
      "",
      "",
      "        //  **Description:**",
      "        //  Multiply 2 from the number or optional amount",
      "        //  @description     ",
      "        //  @param {number} [amount] - The amount to multiply by.",
      "        //  @return {number} - The result of the multiplication.",
      "        //  @example newNumber = 21",
      "        //  @example ",
      "        //  @example result = newNumber.multiply",
      "        //  @example        ",
      "        //  print(result); // Outputs: 42",
      "        //  @example result2 = newNumber.multiply(3)",
      "        //  @example        ",
      "        //  print(result2); // Outputs: 63      ",
      "    number.multiply = function(amount = 2)",
      "            return self * locals.amount",
      "    end function "
    ]
  },
  "numbers: plus": {
    "prefix": "num_plus",
    "scope": "greyscript",
    "description": "Insert plus (full, with header).",
    "body": [
      "// @startuml",
      "// title number.plus(amount=1)",
      "//",
      "// participant Caller",
      "// participant number",
      "//",
      "// Caller -> number: call plus(amount=1)",
      "// activate number",
      "//",
      "// note right: locals.amount = amount (default 1)",
      "//",
      "// number --> Caller: return self + locals.amount",
      "// deactivate number",
      "// @enduml",
      "",
      "",
      "//  **Description:**",
      "    //  Add 1 to the number or optional amount",
      "    //  @description     ",
      "    //  @param {number} [amount] - The amount to add.",
      "    //  @return {number} - The result of the addition.",
      "    //  @example newNumber = 40",
      "    //  @example ",
      "    //  @example result = newNumber.plus(2);",
      "    //  @example",
      "    //  print(result); // Outputs: 42",
      "number.plus = function(amount = 1)",
      "        return self + locals.amount",
      "end function  "
    ]
  },
  "numbers: random_from": {
    "prefix": "num_random_from",
    "scope": "greyscript",
    "description": "Insert random_from (full, with header).",
    "body": [
      "// @startuml",
      "// title number.random_from(min=0)",
      "//",
      "// participant Caller",
      "// participant number",
      "//",
      "// Caller -> number: call random_from(min=0)",
      "// activate number",
      "//",
      "// note right: locals.max = self",
      "// note right: locals.min = min (default 0)",
      "//",
      "// number --> number: calculate random number\\nfloor((rnd * (locals.max - locals.min + 1)) + locals.min)",
      "// number --> Caller: return random number",
      "// deactivate number",
      "// @enduml",
      "",
      "",
      "//  **Description:**",
      "        //  Generate a random number from 0 to number, or from optional minimum to number",
      "        //  @param {number} [min]",
      "        //  @return {number} - The result of the subtraction.",
      "        //  @example myNumber = 100;",
      "        //  @example ",
      "        //  @example result = myNumber.random_from(50);",
      "        //  @example",
      "        //  print(result); // Output: A random number between 50 and 100",
      "    number.random_from = function(min = 0)",
      "            locals.max = self",
      "            return floor((rnd * (locals.max - locals.min + 1)) + locals.min)  ",
      "    end function",
      "   "
    ]
  },
  "numbers: lerp": {
    "prefix": "num_lerp",
    "scope": "greyscript",
    "description": "Insert lerp (full, with header).",
    "body": [
      "// @startuml",
      "// title number.lerp(min, max, offset)",
      "//",
      "// participant Caller",
      "// participant number",
      "//",
      "// Caller -> number: call lerp(min, max, offset)",
      "// activate number",
      "//",
      "// note right: Clamp offset between 0 and 1",
      "// number -> number: if offset > 1 set offset = 1",
      "// number -> number: if offset < 0 set offset = 0",
      "//",
      "// note right: Calculate difference and scaled difference",
      "// number -> number: difference = max - min",
      "// number -> number: scaled_difference = offset * difference",
      "//",
      "// number --> Caller: return min + scaled_difference",
      "// deactivate number",
      "// @enduml",
      "",
      "//  **Description:**",
      "//  Computes the linear interpolation (lerp) between two numbers.",
      "//  @description Calculates an intermediate value between a start and an end number based on a provided interpolation factor.",
      "//  @param {number} min - The starting value.",
      "//  @param {number} max - The ending value.",
      "//  @param {number} offset - The interpolation factor where 0 returns start, 1 returns end, and values in between yield a proportional blend.",
      "//  @return {number} - The interpolated value.",
      "//  @example min = 10",
      "//  @example max = 20",
      "//  @example offset = 0.5",
      "//  @example result = lerp(min, max, offset)",
      "//  @example",
      "//  print(result); // Output: 15",
      "    number.lerp = function(min, max, offset)",
      "        if locals.offset > 1 then locals.offset = 1",
      "        if locals.offset < 0 then locals.offset = 0",
      "        locals.difference = locals.max - locals.min",
      "        locals.scaled_difference = locals.offset * locals.difference",
      "        return locals.min + locals.scaled_difference",
      "    end function"
    ]
  }
}