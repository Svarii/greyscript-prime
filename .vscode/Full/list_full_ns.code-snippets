{
  "list: crop": {
    "prefix": "list_crop",
    "scope": "greyscript",
    "description": "Insert crop (full, with header).",
    "body": [
      "// Crops off empty elements from the start and end of a list",
      "// @description **Description:**",
      "// @description Iterates through a list end and checks for empty items, if found, `.remove` is used on list item",
      "// @description ---",
      "//",
      "// @description **Parameters:**",
      "// @description - none",
      "//",
      "// @description **Return:**",
      "// @return {list}",
      "// @description `list` The same list with empty items purged from ends",
      "// @description ---",
      "//",
      "// @description **Author:** Svarii",
      "// @description **Version:** 0.0.1",
      "// @description ---",
      "//",
      "// @example myList = [\"\",\"\",\"cat\",\"dog\",\"\"];",
      "// @example result = myList.crop",
      "// @example",
      "// print(result); // Output: [\"cat\",\"dog\"]",
      "// @description ---        ",
      "    list.crop = function()",
      "        while not self[self.len - 1].len > 0",
      "            self.remove(self.len - 1)",
      "        end while",
      "        while not self[0].len > 0",
      "            self.remove(0)",
      "        end while",
      "        return self",
      "    end function",
      "//@name crop",
      "    //  * @startuml",
      "    //  * entity ListObject",
      "    //  * control \".crop\" as crop",
      "    //  *   ListObject -> crop : [//\"\"//,//\"\"//,\"item1\", \"item2\", //\"\"//]",
      "    //  *   crop -> ListObject : [\"item1\", \"item2\"]",
      "    //  * footer",
      "    //  *   list.crop",
      "    //  * endfooter         ",
      "    //  * @enduml         "
    ]
  },
  "list: push_once": {
    "prefix": "list_push_once",
    "scope": "greyscript",
    "description": "Insert push_once (full, with header).",
    "body": [
      "",
      "map.push_once = function(mapItem)",
      "\tif not self.hasIndex(self.indexOf(mapItem)) then",
      "\t\tself.push(targetIP)",
      "\tend if\t",
      "end function"
    ]
  },
  "list: string": {
    "prefix": "list_string",
    "scope": "greyscript",
    "description": "Insert string (full, with header).",
    "body": [
      "// Return string constructed from all elements of a list",
      "    // @description **Description:**",
      "    // @description Iterates through a list and construct a string using the provided seperator, or char(10) if no seperator is specified.",
      "    // @description ---",
      "    //",
      "    // @description **Parameters:**",
      "    // @param {string} [seperator]",
      "    // @description - `seperator`:`<string>` The character to use to seperate the list items in the new string.",
      "    //",
      "    // @description **Parameter Defaults:**",
      "    // @description - `seperator`:`char(10)` The character(s) to use to seperate the list items in the new string.",
      "    //",
      "    // @description **Return:**",
      "    // @return {string}",
      "    // @description `string` The newly constructed string.",
      "    // @description ---",
      "    //",
      "    // @description **Author:** Svarii",
      "    // @description **Version:** 0.0.1",
      "    // @description ---",
      "    //",
      "    // @example myList = [\"cat\",\"dog\"]",
      "    // @example",
      "    // myList.string           // Output: \"cat\" + char(10) + \"dog\"",
      "    // @example",
      "    // myList.string(\", \")     // Output: \"cat, dog\"",
      "    // @description ---",
      "list.string = function(seperator = char(10))",
      "    locals.printString = split(self, locals.seperator)",
      "    return locals.printString",
      "end function",
      "    //@name string",
      "        //  * @startuml",
      "        //  * entity ListObject",
      "        //  * interface ScreenOutput",
      "        //  * control \".string\" as string",
      "        //  *   ListObject -> string : list",
      "        //  *   string -> ScreenOutput : string()",
      "        //  * footer",
      "        //  *   list.string",
      "        //  * endfooter         ",
      "        //  * @enduml           "
    ]
  }
}