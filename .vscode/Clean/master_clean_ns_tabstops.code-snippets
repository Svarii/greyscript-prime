{
  "construct: fetch_whois": {
    "prefix": "construct_fetch_whois",
    "scope": "greyscript",
    "description": "Insert fetch_whois (clean, header removed).",
    "body": [
      "fetch_whois = function(routerPublicIPAddress)",
      "\tif not is_lan_ip(locals.routerPublicIPAddress) == true then",
      "\t\tif is_valid_ip(routerPublicIPAddress) then",
      "\t\t\tlocals.whoisInfo = {\"classID\":\"whoisInfo\", \"admin\":\"\", \"domain\":\"\", \"email\":\"\", \"network\":\"\", \"phone\":\"\", \"error\":null}",
      "\t\t\tlocals.what = split(whois(locals.routerPublicIPAddress), \"\\n\")",
      "\t\t\tlocals.whoisInfo.domain = str(split(locals.what[0], \":\")[1]).trim",
      "\t\t\tlocals.whoisInfo.admin = str(split(locals.what[1], \":\")[1]).trim",
      "\t\t\tlocals.whoisInfo.email = str(split(locals.what[2], \":\")[1]).trim",
      "\t\t\tlocals.whoisInfo.phone = str(split(locals.what[3], \":\")[1]).trim",
      "\t\t\tif locals.what.len >= 5 then",
      "\t\t\t\tlocals.whoisInfo.network = str(split(locals.what[4], \":\")[0]).trim",
      "\t\t\telse",
      "\t\t\t\tlocals.whoisInfo.network = \"[ UNKNOWN ]\"",
      "\t\t\tend if",
      "\t\telse ",
      "\t\t\tlocals.whoisInfo = {\"classID\":\"whoisInfo\", \"error\":\"Invalid Public IP Address Provided.\"}\t",
      "\t\tend if",
      "\telse",
      "\t\tlocals.whoisInfo = {\"classID\":\"whoisInfo\", \"error\":\"Needs Public IP, Provided Local IP.\"}",
      "\tend if",
      "\tlocals.whoisInfo.error = false",
      "\treturn locals.whoisInfo",
      "end function",
      "",
      "",
      ""
    ]
  },
  "construct: file_location_ident": {
    "prefix": "construct_file_location_ident",
    "scope": "greyscript",
    "description": "Insert file_location_ident (clean, header removed).",
    "body": [
      "file_location_ident = function(absoluteLocation)",
      "        locals.ext = slice(locals.absoluteLocation, (locals.absoluteLocation.lastIndexOf(\".\") + 1), locals.absoluteLocation.len)",
      "        locals.name = slice(locals.absoluteLocation, locals.absoluteLocation.lastIndexOf(\"/\") + 1, locals.absoluteLocation.lastIndexOf(\".\"))",
      "\t\tlocals.filename = locals.name + \".\" + locals.ext",
      "        locals.dir = slice(locals.absoluteLocation, locals.absoluteLocation.indexOf(\"/\"), locals.absoluteLocation.lastIndexOf(\"/\"))",
      "        locals.folder = slice(locals.dir, locals.dir.lastIndexOf(\"/\") + 1)",
      "        locals.location = locals.dir + \"/\" + locals.name + \".\" + locals.ext",
      "        locals.construct = {\"classID\":\"fileID\", \"ext\": locals.ext, \"name\": locals.name, \"parentdir\": locals.folder, \"dir\": locals.dir, \"location\": locals.location, \"filename\": locals.filename}",
      "        return locals.construct",
      "end function",
      "// @startyaml",
      "//",
      "// # File Identifier Class Diagram",
      "// #highlight \"fileID\" / \"File Info\"",
      "//",
      "// fileID:",
      "//   File Info:",
      "//     ext: \"string\"      # File extension",
      "//     name: \"string\"     # Base name of the file",
      "//     filename: \"string\" # Full file name",
      "//   Path Info:",
      "//     dir: \"string\"      # Directory path",
      "//     parentdir: \"string\" # Parent directory",
      "//     location: \"string\"  # Absolute file path",
      "//",
      "// # Note:",
      "// # Extracts and assembles file properties",
      "// # from an absolute location.",
      "//",
      "// @endyaml"
    ]
  },
  "construct: id_self": {
    "prefix": "construct_id_self",
    "scope": "greyscript",
    "description": "Insert id_self (clean, header removed).",
    "body": [
      "id_self = function()",
      "\tlocals.localRouter = get_router",
      "        if not typeof(locals.localRouter) == \"router\" then return \"Failed to fetch local router object.\"",
      "\tlocals.localComputer = get_shell.host_computer",
      "        if not typeof(locals.localComputer) == \"computer\" then return \"Failed to fetch local computer object.\"",
      "\tlocals.ipInformation = {\"classID\": \"ipInformation\", \"local\": locals.localComputer.local_ip, \"public\": locals.localComputer.public_ip, \"gateway\":locals.localComputer.network_gateway}",
      "\tlocals.ipScan = locals.ipInformation",
      "\tlocals.ComputerInformation = {\"classID\": \"computerInformation\",\"name\":locals.localComputer.get_name, \"home\":home_dir, \"location\":program_path, \"path\":current_path, \"user\":active_user, \"has_internet\":locals.localComputer.is_network_active}",
      "\tlocals.computerInfo = locals.ComputerInformation",
      "\tlocals.currentStatus = {\"classID\":\"currentStatus\", \"ipInfo\":locals.ipScan, \"compInfo\":locals.computerInfo}",
      "\tlocals.currentStatus.classID = \"currentStatus\"",
      "\treturn locals.currentStatus",
      "end function",
      "\t// @startuml",
      "\t// title <color:purple>currentStatus Class Diagram</color>",
      "\t// ",
      "\t// class currentStatus {",
      "\t//   .. <color:blue>.compInfo</color> ..",
      "\t//   + .name : string",
      "\t//   + .home : string",
      "\t//   + .location : string",
      "\t//   + .path : string",
      "\t//   + .user : string",
      "\t//   + .has_internet : boolean",
      "\t// ",
      "\t//   .. <color:blue>.ipInfo</color> ..",
      "\t//   + local : string",
      "\t//   + public : string",
      "\t//   + gateway : string",
      "\t// }",
      "\t// ",
      "\t// note right of currentStatus",
      "\t//   * Pulls basic information",
      "\t//      on the immediate environment",
      "\t//   * Populates currentStatus Object",
      "\t// end note",
      "\t// ",
      "\t// @enduml"
    ]
  },
  "construct: fetch_exploit_requirements": {
    "prefix": "construct_fetch_exploit_requirements",
    "scope": "greyscript",
    "description": "Insert fetch_exploit_requirements (clean, header removed).",
    "body": [
      "fetch_exploit_requirements = function(targetAddress, metaLibObject, metaxploitObject)",
      "    locals.metax = locals.metaxploitObject",
      "    locals.metaLib = locals.metaLibObject",
      "    locals.allExploitData = []",
      "    locals.scanResults = locals.metax.scan_address(locals.metaLib, targetAddress)",
      "    locals.unsafeCheckLists = (unsafe_check_list(locals.scanResults)).crop",
      "    for unsafeCheck in locals.unsafeCheckLists",
      "            locals.exploits = {\"classID\": \"exploitRequirments\", \"version\":version, \"address\": targetAddress, \"variable\": locals.unsafeCheck.extract, \"cra\": false, \"cga\": false, \"cua\": false, \"rur\": 0, \"rpf\": 0}",
      "            if not locals.unsafeCheck.indexOf(\"Checking root active\") then",
      "                locals.exploits.cra = false",
      "            else",
      "                locals.exploits.cra = true",
      "            end if",
      "            if not locals.unsafeCheck.indexOf(\"Checking an active user\") then",
      "                locals.exploits.cua = false",
      "            else",
      "                locals.exploits.cua = true",
      "            end if",
      "            if not locals.unsafeCheck.indexOf(\"Checking guest active\") then",
      "                locals.exploits.cga = false",
      "            else",
      "                locals.exploits.cga = true",
      "            end if",
      "                locals.unsafeCheckItems = split(locals.unsafeCheck, char(10))",
      "                locals.unsafeCheckHeader = locals.unsafeCheckItems[0]",
      "                for unsafeItem in locals.unsafeCheckItems",
      "                    if not locals.unsafeItem.indexOf(\"to \", \".\") == null then",
      "                        if not locals.unsafeItem.indexOf(\"registered users\") == null then",
      "                            locals.exploits.rur = to_int((locals.unsafeItem.extract(\"to \", \".\")).remove_char_last)",
      "                        end if  ",
      "                        if not locals.unsafeItem.indexOf(\"port forwarding\") == null then",
      "                            locals.portForwards = locals.unsafeItem.remove(\" port forwarding configured from router to the target computer.\")",
      "                            locals.exploits.rpf = to_int(((locals.unsafeItem.remove(\" port forwarding configured from router to the target computer.\")).remove(\"* \")))",
      "                        end if\t\t\t\t\t\t",
      "                    end if",
      "                end for",
      "            locals.exploits.version = locals.metaLib.version",
      "            locals.allExploitData.push(locals.exploits)",
      "        end for",
      "    return locals.allExploitData",
      "end function",
      "// @startuml",
      "// title <color:purple>ExploitRequirements Class Diagram</color>",
      "//",
      "// class ExploitRequirements {",
      "//   .. <color:blue>Patch Status</color> ..",
      "//   + is_patched : boolean",
      "//",
      "//   .. <color:blue>Target Info</color> ..",
      "//   + address : string",
      "//   + variable : string",
      "//   + version : string",
      "//",
      "//   .. <color:blue>Activation Checks</color> ..",
      "//   + cra : boolean     // root active",
      "//   + cua : boolean     // user active",
      "//   + cga : boolean     // guest active",
      "//",
      "//   .. <color:blue>Thresholds</color> ..",
      "//   + rur : number      // required users registered",
      "//   + rpf : number      // required port forwards",
      "// }",
      "//",
      "// note right of ExploitRequirements",
      "//   * Defines conditions needed for exploit deployment",
      "//   * Includes patch status and system role activity",
      "//   * Thresholds must be met for successful trigger",
      "// end note",
      "//",
      "// @enduml"
    ]
  },
  "enum: gstexts": {
    "prefix": "enum_gstexts",
    "scope": "greyscript",
    "description": "Insert gstexts (clean, header removed).",
    "body": [
      "report_string_construct__ = function()",
      "\tlocals.fail = new {\"classID\": \"errorStrings\"}",
      "\tlocals.pass = new {\"classID\": \"passStrings\"}",
      "\tlocals.action = new {\"classID\": \"actionStrings\"}",
      "\tlocals.info = new {\"classID\": \"infoStrings\"}",
      "\tlocals.email = new {\"classID\": \"emailString\"}",
      "\tlocals.status = {\"classID\": \"gstexts\", \"fail\": locals.fail, \"pass\": locals.pass, \"action\": locals.action, \"info\": locals.info, \"email\": locals.email}",
      "\tlocals.status.fail.network_devices_found = \"No network devices found\"",
      "\tlocals.status.pass.network_devices_found = \"Network device(s) found  \"",
      "\tlocals.status.fail.lib_found = \"Library not found\"",
      "\tlocals.status.pass.lib_found = \"Library found\"",
      "\tlocals.status.fail.file_found = \"File not found\"",
      "\tlocals.status.pass.file_found = \"File found\"",
      "\tlocals.status.fail.dir_found = \"Directory not found\"",
      "\tlocals.status.pass.dir_found = \"Directory found\"",
      "\tlocals.status.fail.user_found = \"User not found\"",
      "\tlocals.status.pass.user_found = \"User found\"",
      "\tlocals.status.fail.default = \"FAIL\"",
      "\tlocals.status.pass.default = \"PASS\"",
      "\tlocals.status.fail.check_user_email = \"eMail not found\"",
      "\tlocals.status.pass.check_user_email = \"eMail Found\"\t",
      "\tlocals.status.fail.check_user_bank = \"bank account not found\"",
      "\tlocals.status.pass.check_user_bank = \"bank account Found\"",
      "\tlocals.status.info.active_card_wifi = \"Connected to WIFI\"",
      "\tlocals.status.info.active_card_ethernet = \"Connected to Ethernet\"\t\t\t\t",
      "\tlocals.status.action.check_network_devices = \"Checking Network Devices...\"",
      "\tlocals.status.action.check_user_email = \"Checking for email account...\"",
      "\tlocals.status.action.check_user_bank = \"Checking for bank account...\"",
      "\tlocals.status.action.check_active_net_card = \"Checking for active net card...\"",
      "\tlocals.status.email.mission_contract = \"Mission Contract\"",
      "\tlocals.status.fail.has_internet = \"No Internet Connection\"",
      "\tlocals.status.pass.has_internet = \"Internet Connection Found\"",
      "\tlocals.status.action.has_internet = \"Checking Internet Connection...\"",
      "\tlocals.status.info.mission_contract = \"Mission Contract\"",
      "\tlocals.status.fail.has_lib_dir = \"lib directory not found\"",
      "\tlocals.status.pass.has_lib_dir = \"lib directory Found\"",
      "\tlocals.status.action.has_lib_dir = \"Checking for lib directory...\"",
      "\tlocals.status.fail.has_metaxploit = \"metaxploit not found\"",
      "\tlocals.status.pass.has_metaxploit = \"metaxploit found\"",
      "\tlocals.status.action.has_metaxploit = \"Checking for metaxploit.so...\"\t",
      "\treturn locals.status",
      "end function",
      "\t// @startyaml",
      "\t//",
      "\t// # ReportStringConstruct Diagram",
      "\t// #highlight \"gstexts\" / \"status\"",
      "\t//",
      "\t// gstexts:",
      "\t//   classID: \"gstexts\"",
      "\t//   fail:",
      "\t//     classID: \"errorStrings\"",
      "\t//     network_devices_found: \"No network devices found\"",
      "\t//     lib_found: \"Library not found\"",
      "\t//     file_found: \"File not found\"",
      "\t//     dir_found: \"Directory not found\"",
      "\t//     user_found: \"User not found\"",
      "\t//     default: \"FAIL\"",
      "\t//     check_user_email: \"eMail not found\"",
      "\t//     check_user_bank: \"bank account not found\"",
      "\t//     has_internet: \"No Internet Connection\"",
      "\t//     has_lib_dir: \"lib directory not found\"",
      "\t//     has_metaxploit: \"metaxploit not found\"",
      "\t//   pass:",
      "\t//     classID: \"passStrings\"",
      "\t//     network_devices_found: \"Network device(s) found  \"",
      "\t//     lib_found: \"Library found\"",
      "\t//     file_found: \"File found\"",
      "\t//     dir_found: \"Directory found\"",
      "\t//     user_found: \"User found\"",
      "\t//     default: \"PASS\"",
      "\t//     check_user_email: \"eMail Found\"",
      "\t//     check_user_bank: \"bank account Found\"",
      "\t//     has_internet: \"Internet Connection Found\"",
      "\t//     has_lib_dir: \"lib directory Found\"",
      "\t//     has_metaxploit: \"metaxploit found\"",
      "\t//   action:",
      "\t//     classID: \"actionStrings\"",
      "\t//     check_network_devices: \"Checking Network Devices...\"",
      "\t//     check_user_email: \"Checking for email account...\"",
      "\t//     check_user_bank: \"Checking for bank account...\"",
      "\t//     check_active_net_card: \"Checking for active net card...\"",
      "\t//     has_internet: \"Checking Internet Connection...\"",
      "\t//     has_lib_dir: \"Checking for lib directory...\"",
      "\t//     has_metaxploit: \"Checking for metaxploit.so...\"",
      "\t//   info:",
      "\t//     classID: \"infoStrings\"",
      "\t//     active_card_wifi: \"Connected to WIFI\"",
      "\t//     active_card_ethernet: \"Connected to Ethernet\"",
      "\t//     mission_contract: \"Mission Contract\"",
      "\t//   email:",
      "\t//     classID: \"emailString\"",
      "\t//     mission_contract: \"Mission Contract\"",
      "\t//",
      "\t// @endyaml"
    ]
  },
  "functions: file_delete": {
    "prefix": "fn_file_delete",
    "scope": "greyscript",
    "description": "Insert file_delete (clean, header removed).",
    "body": [
      "\tfile_delete = function(filePath, fileName)",
      "\t\tlocals.hostComputer = get_shell.host_computer",
      "\t\tlocals.fileLocation = locals.filePath + \"/\" + locals.fileName",
      "\t\tlocals.fileObj = locals.hostComputer.File(locals.fileLocation)",
      "\t\tif locals.fileObj.has_permission(\"w\") then",
      "\t\t\tlocals.hostComputer.File.delete",
      "\t\t\treturn true",
      "\t\tend if",
      "\t\treturn false",
      "\tend function"
    ]
  },
  "functions: file_exists": {
    "prefix": "fn_file_exists",
    "scope": "greyscript",
    "description": "Insert file_exists (clean, header removed).",
    "body": [
      "\tfile_exists = function(filePath, fileName)",
      "\t\tlocals.hostComputer = get_shell.host_computer",
      "\t\tlocals.fileLocation = locals.filePath + \"/\" + locals.fileName",
      "\t\tlocals.fileObj = locals.hostComputer.File(locals.fileLocation)",
      "\t\tif not locals.fileObj then",
      "\t\t\treturn false",
      "\t\telse",
      "\t\t\treturn true",
      "\t\tend if\t\t",
      "\tend function"
    ]
  },
  "functions: file_new": {
    "prefix": "fn_file_new",
    "scope": "greyscript",
    "description": "Insert file_new (clean, header removed).",
    "body": [
      "\tfile_new = function(filePath, fileName)",
      "\t\tlocals.hostComputer = get_shell.host_computer",
      "\t\tlocals.fileLocation = locals.filePath + \"/\" + locals.fileName",
      "\t\tlocals.fileObj = locals.hostComputer.File(locals.fileLocation)",
      "\t\tif not locals.fileObj then",
      "\t\t\tlocals.hostComputer.touch(locals.filePath, locals.fileName)",
      "\t\t\tlocals.fileObj = locals.hostComputer.File(locals.fileLocation)",
      "\t\tend if",
      "\t\tif locals.fileObj then",
      "\t\t\treturn true",
      "\t\telse",
      "\t\t\treturn false",
      "\t\tend if",
      "\tend function",
      "// @startuml",
      "// start",
      "// :<color:purple>hostComputer = get_shell.host_computer</color>;",
      "// :<color:purple>fileLocation = filePath + \"/\" + fileName</color>;",
      "// :<color:purple>fileObj = hostComputer.File(fileLocation)</color>;",
      "// if (<color:blue>fileObj does not exist?</color>) then (<color:red>Yes</color>)",
      "//   :<color:purple>hostComputer.touch(filePath, fileName)</color>;",
      "//   :<color:purple>fileObj = hostComputer.File(fileLocation)</color>;",
      "// endif",
      "// if (<color:blue>fileObj exists?</color>) then (<color:green>Yes</color>)",
      "//   :<color:purple>return true</color>;",
      "//   stop",
      "// else (<color:green>No</color>)",
      "//   :<color:purple>return false</color>;",
      "//   stop",
      "// endif",
      "// @enduml\t"
    ]
  },
  "functions: force_params": {
    "prefix": "fn_force_params",
    "scope": "greyscript",
    "description": "Insert force_params (clean, header removed).",
    "body": [
      "\tforce_params = function(usage, minReqParams)",
      "\t\tif globals.params.len < 1 then exit locals.usage",
      "\t\tif globals.params[0] == \"-h\" or globals.params[0] == \"--help\" then exit locals.usage",
      "\t\tif globals.params.len < locals.minReqParams then exit locals.usage",
      "\tend function"
    ]
  },
  "functions: get_acks": {
    "prefix": "fn_get_acks",
    "scope": "greyscript",
    "description": "Insert get_acks (clean, header removed).",
    "body": [
      "\tget_acks = function(signalStrength = 1)",
      "\t\tif not typeof(locals.signalStrength) == \"number\" then",
      "\t\t\tlocals.removePercent = locals.signalStrength.remove(\"%\") //check for % in number string",
      "\t\t\tlocals.newNumber = typeof(to_int(locals.removePercent))",
      "\t\t\tif not locals.newNumber == \"number\" then return null ",
      "\t\t\tif locals.newNumber < 0 then return null",
      "\t\t\tif locals.newNumber > 100 then return null",
      "\t\t\tlocals.signalStrength = locals.newNumber",
      "\t\tend if",
      "\t\tif locals.signalStrength <= 0 or locals.signalStrength > 100 then return null",
      "\t\treturn ceil(300000 / (locals.signalStrength + 15))",
      "\tend function",
      "// @startuml",
      "// start",
      "// :<color:purple>signalStrength = 1 (default)</color>;",
      "// if (<color:blue>is signalStrength a number?</color>) then (<color:red>No</color>)",
      "//   :<color:red>return <b>null</b></color>;",
      "//   stop",
      "// else (<color:green>Yes</color>)",
      "// endif",
      "// if (<color:blue>is signalStrength > 0 and <= 100?</color>) then (<color:red>No</color>)",
      "//   :<color:red>return <b>null</b></color>;",
      "//   stop",
      "// else (<color:green>Yes</color>)",
      "// endif",
      "// :<color:purple>numofACK = ceil(300000 / signalStrength)</color>;",
      "// :<color:green>return <b>numofACK</b></color>;",
      "// stop",
      "// @enduml"
    ]
  },
  "functions: get_exploit_address_list": {
    "prefix": "fn_get_exploit_address_list",
    "scope": "greyscript",
    "description": "Insert get_exploit_address_list (clean, header removed).",
    "body": [
      "get_exploit_address_list = function(libLocation, metaxploitObject, remoteTarget = false, targetPort = 0)",
      "    locals.metax = locals.metaxploitObject",
      "\t\tif locals.remoteTarget == false then",
      "        \tlocals.metaLib = locals.metax.load(locals.libLocation)",
      "\t\telse",
      "\t\t\tlocals.netSession = locals.metax.net_use(locals.libLocation, locals.targetPort)",
      "\t\t\tlocals.metaLib = locals.netSession.dump_lib",
      "\t\tend if",
      "\t\tlocals.libScanResult = locals.metax.scan(locals.metaLib)",
      "        return locals.libScanResult",
      "end function",
      "// @startuml",
      "// start",
      "// :<color:purple>metax = metaxploitObject</color>;",
      "// if (<color:blue>remoteTarget == false?</color>) then (<color:green>Yes</color>)",
      "//   :<color:purple>metaLib = metax.load(libLocation)</color>;",
      "// else (<color:green>No</color>)",
      "//   :<color:purple>metaLib = metax.net_use(libLocation, to_int(targetPort))</color>;",
      "// endif",
      "// :<color:purple>libScanResult = metax.scan(metaLib)</color>;",
      "// :<color:green>return libScanResult</color>;",
      "// stop",
      "// @enduml"
    ]
  },
  "functions: bool_text": {
    "prefix": "fn_bool_text",
    "scope": "greyscript",
    "description": "Insert bool_text (clean, header removed).",
    "body": [
      "bool_text = function(boolVal, text = [\"true\", \"false\"])",
      "        locals.boolText = {\"yes\":\"false\", \"no\":\"false\"}",
      "        if locals.boolVal < 0 then return locals.boolText.no",
      "        if locals.boolVal > 1 then return locals.boolText.yes",
      "        if locals.boolVal == 1 then return locals.boolText.yes",
      "        if locals.boolVal == 0 then return locals.boolText.no",
      "    return null",
      "end function"
    ]
  },
  "functions: display_menu": {
    "prefix": "fn_display_menu",
    "scope": "greyscript",
    "description": "Insert display_menu (clean, header removed).",
    "body": [
      "display_menu = function(menuList, selectedItem, highlightcolor = \"#FFFF002C\", textColor = null)",
      "    locals.outputMenu = []",
      "    for menuItem in locals.menuList",
      "        if locals.selectedItem == __menuItem_idx then",
      "            if locals.textColor == null then",
      "                locals.outputMenu.push(locals.menuItem.mark(locals.highlightcolor))",
      "            else",
      "                locals.outputMenu.push(locals.menuItem.color(locals.textColor).mark(locals.highlightcolor))",
      "            end if",
      "        else",
      "            locals.outputMenu.push(locals.menuItem)",
      "        end if",
      "    end for",
      "    return locals.outputMenu",
      "end function",
      "",
      "user_navigation = function (numberIndex, userInput)",
      "    indexChange = numberIndex",
      "    if locals.userInput == \"UpArrow\" then",
      "        locals.indexChange = locals.indexChange - 1",
      "    end if",
      "    if locals.userInput == \"DownArrow\" then",
      "        locals.indexChange = locals.indexChange + 1",
      "    end if",
      "    return locals.indexChange",
      "end function",
      "",
      "keepAlive = true",
      "myMenu = [\"item 1\", \"item2\", \"item3\", \"item4\"]",
      "menuSelection = 0",
      "",
      "while not userInput ==  \"LeftArrow\"",
      "    clear_screen",
      "    menu = display_menu(myMenu, menuSelection)",
      "    for line in menu",
      "        print line",
      "    end for",
      "    menuSelection = (user_navigation(menuSelection, user_input(\"\", false, true))).clamp(0, (myMenu.len - 1))",
      "end while "
    ]
  },
  "functions: extract_ip": {
    "prefix": "fn_extract_ip",
    "scope": "greyscript",
    "description": "Insert extract_ip (clean, header removed).",
    "body": [
      "extractIP = function(inputString)",
      "    locals.ipPattern = \"\\b(?:(?:${1:25}[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]?\\\\d)\\b\"",
      "    locals.matchResult = inputString.matches(locals.ipPattern)",
      "    if locals.matchResult.values.len > 0 then",
      "        return locals.matchResult.values[0]",
      "    else",
      "        return null",
      "    end if",
      "end function"
    ]
  },
  "functions: file_append": {
    "prefix": "fn_file_append",
    "scope": "greyscript",
    "description": "Insert file_append (clean, header removed).",
    "body": [
      "\tfile_append = function(savePath, saveFile, newText)",
      "\t\t//********************************************",
      "\t\tlocals.fileContent = \"\"",
      "\t\tlocals.fileLocation = locals.savePath + \"/\" + locals.saveFile",
      "\t\t//********************************************\t",
      "\t\tlocals.hostComputer = get_shell.host_computer",
      "\t\tlocals.fileObj = locals.hostComputer.File(locals.fileLocation)",
      "\t\tif not locals.fileObj then",
      "\t\t\tlocals.hostComputer.touch(locals.savePath, locals.saveFile)",
      "\t\t\tlocals.fileObj = locals.hostComputer.File(locals.fileLocation)",
      "\t\tend if",
      "\t\t//********************************************",
      "\t\t//********************************************\t\t",
      "\t\tif locals.fileObj.has_permission(\"r\") then",
      "\t\t\tif locals.fileObj.has_permission(\"w\") then",
      "\t\t\t\tlocals.fileContent = locals.fileObj.get_content",
      "\t\t\t\tif locals.fileContent == null then",
      "\t\t\t\t\tlocals.fileObj.set_content(locals.newText)",
      "\t\t\t\telse",
      "\t\t\t\t\tlocals.fileObj.set_content(locals.fileContent + locals.newText)",
      "\t\t\t\tend if",
      "\t\t\telse",
      "\t\t\tprint(\"Permission Error Saving Data to: \" + locals.saveFile + \" [No Write Permission]\")",
      "\t\t\tend if",
      "\t\telse",
      "\t\t\tprint(\"Permission Error Saving Data to: \" + locals.saveFile + \" [No Read Permission]\")",
      "\t\tend if",
      "\tend function",
      "// @startuml",
      "// start",
      "// :<color:purple>fileContent = \"\"</color>;",
      "// :<color:purple>fileLocation = savePath + \"/\" + saveFile</color>;",
      "// :<color:purple>hostComputer = get_shell.host_computer</color>;",
      "// :<color:purple>fileObj = hostComputer.File(fileLocation)</color>;",
      "// if (<color:blue>fileObj does not exist?</color>) then (<color:red>Yes</color>)",
      "//   :<color:purple>Create file: touch(savePath, saveFile)</color>;",
      "//   :<color:purple>fileObj = hostComputer.File(fileLocation)</color>;",
      "// endif",
      "// if (<color:blue>fileObj has both read and write permission?</color>) then (<color:green>Yes</color>)",
      "//   :<color:purple>fileContent = fileObj.get_content</color>;",
      "//   if (<color:blue>fileContent is null?</color>) then (<color:red>Yes</color>)",
      "//     :<color:purple>Set file content to newText</color>;",
      "//   else (<color:green>No</color>)",
      "//     :<color:purple>Append newText to existing content</color>;",
      "//   endif",
      "// else (<color:red>No Read/Write Permission</color>)",
      "//   :<color:red>Print permission error</color>;",
      "// endif",
      "// stop",
      "// @enduml"
    ]
  },
  "functions: is_type": {
    "prefix": "fn_is_type",
    "scope": "greyscript",
    "description": "Insert is_type (clean, header removed).",
    "body": [
      "\tis_typeof = function(testObject, objectType)",
      "\t\t\tif not typeof(locals.testObject) == locals.objectType then return false",
      "\t\t\treturn true",
      "\tend function",
      "// @startuml",
      "// start",
      "// if (<color:blue>is typeof(object) not equal to objectType?</color>) then (<color:red>Yes</color>)",
      "//   :<color:purple>return false</color>;",
      "//   stop",
      "// else (<color:green>No</color>)",
      "//   :<color:purple>return true</color>;",
      "//   stop",
      "// endif",
      "// @enduml\t"
    ]
  },
  "functions: kill_procs": {
    "prefix": "fn_kill_procs",
    "scope": "greyscript",
    "description": "Insert kill_procs (clean, header removed).",
    "body": [
      "kill_procs = function(computerObject = get_shell.host_computer, pid = null, killRoot = false)",
      "termItem = function(termProc)",
      "\tcomputerObject.close_program(locals.termProc)\t\t\t\t\t\t\t",
      "end function",
      "if not pid == null then",
      "\tlocals.computerObject.close_program(locals.pid)",
      "else",
      "\tlocals.procs = split(get_shell.host_computer.show_procs, char(10), 1)[1:]",
      "\tfor proc in range(1, (locals.procs).len - 1)",
      "\t\tlocals.procSections = split(proc, char(32))",
      "\t\tif not locals.procSections[0] == \"root\" then",
      "\t\t\tlocals.computerObject.close_program(locals.procSections[1])\t\t\t\t\t",
      "\t\telse if locals.procSections[0] == \"root\" and locals.killRoot == true then",
      "\t\t\ttermItem(locals.procSections[1])\t",
      "\t\tend if",
      "\t\tif locals.procSections[0] == \"root\" then",
      "\t\t\ttermItem(locals.procSections[1])\t\t\t\t",
      "\t\tend if",
      "\tend for",
      "end if",
      "end function",
      "myComputer = get_shell.host_computer",
      "kill_procs(myComputer, 5658)"
    ]
  },
  "functions: load_lib": {
    "prefix": "fn_load_lib",
    "scope": "greyscript",
    "description": "Insert load_lib (clean, header removed).",
    "body": [
      "load_lib = function(libName = \"metaxploit.so\", libDir = \"${1:/lib}\", libType = \"\")",
      "    locals.libLocation = locals.libDir + \"/\" + locals.libName",
      "    if locals.libName == \"\" then",
      "        return null",
      "    end if",
      "    locals.lib = include_lib(locals.libLocation)",
      "        if not typeof(locals.lib) == null then",
      "            if locals.libType == \"\" then",
      "                return locals.lib",
      "            else if typeof(locals.lib) == locals.libType then",
      "                return locals.lib",
      "\t\t\telse",
      "\t\t\t\treturn null",
      "            end if",
      "        else",
      "            return null",
      "        end if",
      "end function",
      "",
      ""
    ]
  },
  "functions: network_device_list": {
    "prefix": "fn_network_device_list",
    "scope": "greyscript",
    "description": "Insert network_device_list (clean, header removed).",
    "body": [
      "\tnetwork_device_list = function(user = \"\", pass = \"\")",
      "\t\tlocals.networkDevices = split(get_shell(locals.user, locals.pass).host_computer.network_devices, char(10))",
      "\t\tlocals.networkDeviceList = []",
      "\t\tfor device in locals.networkDevices",
      "\t\t\tif locals.device then locals.networkDeviceList.push(split(locals.device, \" \"))",
      "\t\tend for",
      "\t\treturn locals.networkDeviceList",
      "\tend function",
      "// @startuml",
      "// start",
      "// :<color:purple>networkDevices = split(get_shell(user, pass).host_computer.network_devices, char(10))</color>;",
      "// :<color:purple>networkDeviceList = []</color>;",
      "// :<color:blue>For each device in networkDevices</color>;",
      "// repeat",
      "//   if (<color:blue>device exists?</color>) then (<color:green>Yes</color>)",
      "//     :<color:purple>Push split(device, \" \") into networkDeviceList</color>;",
      "//   endif",
      "// repeat while (another device exists)",
      "// :<color:green>return networkDeviceList</color>;",
      "// stop",
      "// @enduml"
    ]
  },
  "functions: parse_inbox": {
    "prefix": "fn_parse_inbox",
    "scope": "greyscript",
    "description": "Insert parse_inbox (clean, header removed).",
    "body": [
      "parse_inbox = function(mailIDList)",
      "\t\tlocals.mailObjects = []",
      "\t\tlocals.bodyText = \"\"",
      "        for mailList in locals.mailIDList",
      "\t\t\tlocals.mail = new{\"id\":\"\", \"from\":\"\", \"subject\":\"\", \"summary\":\"\", \"body\":\"\"}",
      "\t\t\tlocals.rawMail = globals.metaMail.read(locals.mailList)",
      "\t\t\tlocals.segments = (locals.rawMail.split(char(10))).crop",
      "            locals.mail.from = locals.segments[0][6:]",
      "            locals.mail.subject = locals.segments[1][9:]",
      "            locals.segments.remove(0) // remove from",
      "            locals.segments.remove(0) // remove subject",
      "\t\t\tlocals.mail.id = locals.mailList",
      "            locals.mail.body = locals.segments.string ",
      "\t\t\tlocals.mailObjects.push(locals.mail)",
      "        end for",
      "        return locals.mailObjects",
      "    end function"
    ]
  },
  "functions: get_inbox": {
    "prefix": "fn_get_inbox",
    "scope": "greyscript",
    "description": "Insert get_inbox (clean, header removed).",
    "body": [
      "    get_inbox = function(mailAddress = user_mail_address, mailPass = null)",
      "        if mailPass == null then return null",
      "        locals.metaMail = mail_login(locals.mailAddress, locals.mailPass)",
      "\t\treturn metaMail.fetch",
      "    end function"
    ]
  },
  "functions: get_overflow_owner": {
    "prefix": "fn_get_overflow_owner",
    "scope": "greyscript",
    "description": "Insert get_overflow_owner (clean, header removed).",
    "body": [
      "get_overflow_owner = function(overflowObject)",
      "    locals.overflowOwner = null",
      "    locals.overflowObjectType = typeof(locals.overflowObject)",
      "    if locals.overflowObjectType == \"file\" then",
      "        return locals.overflowObject.owner",
      "    end if",
      "    if locals.overflowObjectType == \"shell\" or locals.overflowObjectType == \"computer\" then",
      "        if locals.overflowObjectType == \"shell\" then locals.rootFolder = locals.overflowObject.host_computer.File(\"${1:/root}\")",
      "        if overflowObjectType == \"computer\" then locals.rootFolder = locals.overflowObject.File(\"${2:/root}\")",
      "        if not locals.rootFolder.has_permission(\"w\") == 0 then return \"root\"",
      "        if locals.overflowObjectType == \"shell\" then locals.homeFolders = locals.overflowObject.host_computer.File(\"/home\").get_folders",
      "        if locals.overflowObjectType == \"computer\" then locals.homeFolders = locals.overflowObject.File(\"/home\").get_folders",
      "        for userFolder in locals.homeFolders",
      "            if locals.userFolder.has_permission(\"w\") then",
      "                locals.overflowOwner = locals.userFolder.name",
      "                if not locals.overflowOwner == \"guest\" then return locals.userFolder.name",
      "            end if",
      "        end for",
      "    end if",
      "    return locals.overflowOwner           ",
      "end function"
    ]
  },
  "functions: get_random_ip": {
    "prefix": "fn_get_random_ip",
    "scope": "greyscript",
    "description": "Insert get_random_ip (clean, header removed).",
    "body": [
      "\tget_random_ip = function()",
      "\tlocals.generateRandomOctet = function()",
      "    \tlocals.binaryString = \"\"",
      "\t    for i in range(8, 1)",
      "\t        // Convert the random float to a binary digit using a threshold:",
      "\t        if rnd() >= 0.5 then",
      "\t            locals.binaryString = locals.binaryString + \"1\"",
      "\t        else",
      "\t            locals.binaryString = locals.binaryString + \"0\"",
      "\t        end if",
      "\t    end for",
      "\t    return (0 + to_int(locals.binaryString[0])) * 128 +",
      "\t           (0 + to_int(locals.binaryString[1])) * 64 +",
      "\t           (0 + to_int(locals.binaryString[2])) * 32 +",
      "\t           (0 + to_int(locals.binaryString[3])) * 16 +",
      "\t           (0 + to_int(locals.binaryString[4])) * 8 +",
      "    \t       (0 + to_int(locals.binaryString[5])) * 4 +",
      "        \t   (0 + to_int(locals.binaryString[6])) * 2 +",
      "\t           (0 + to_int(locals.binaryString[7]))",
      "\tend function",
      "    locals.ipString = \"\"",
      "    for i in range(4, 1)",
      "        locals.octet = locals.generateRandomOctet()",
      "        // Only append a dot if there is already an octet in ipString.",
      "        if locals.ipString != \"\" then",
      "            locals.ipString = locals.ipString + \".\"",
      "        end if",
      "        locals.ipString = locals.ipString + str(locals.octet)",
      "    end for",
      "    return locals.ipString",
      "\tend function",
      "// @startuml",
      "// start",
      "// :<color:purple>Define generateRandomOctet function</color>;",
      "// :<color:purple>binaryString = \"\"</color>;",
      "// :<color:blue>For i = 1 to 8</color>;",
      "// repeat",
      "//   if (<color:blue>rnd() >= 0.5?</color>) then (<color:green>Yes</color>)",
      "//     :<color:purple>binaryString = binaryString + \"1\"</color>;",
      "//   else (<color:red>No</color>)",
      "//     :<color:purple>binaryString = binaryString + \"0\"</color>;",
      "//   endif",
      "// repeat while (next bit)",
      "// :<color:purple>Calculate octet = (bit0 * 128) + (bit1 * 64) + (bit2 * 32) + (bit3 * 16) + (bit4 * 8) + (bit5 * 4) + (bit6 * 2) + (bit7)</color>;",
      "// :<color:green>return octet</color>;",
      "//",
      "// :<color:purple>Initialize ipString = \"\"</color>;",
      "// :<color:blue>For i = 1 to 4</color>;",
      "// repeat",
      "//   :<color:purple>octet = generateRandomOctet()</color>;",
      "//   if (<color:blue>ipString != \"\"?</color>) then (<color:green>Yes</color>)",
      "//     :<color:purple>ipString = ipString + \".\"</color>;",
      "//   endif",
      "//   :<color:purple>ipString = ipString + str(octet)</color>;",
      "// repeat while (next octet)",
      "// :<color:green>return ipString</color>;",
      "// stop",
      "// @enduml\t",
      ""
    ]
  },
  "functions: get_subnet": {
    "prefix": "fn_get_subnet",
    "scope": "greyscript",
    "description": "Insert get_subnet (clean, header removed).",
    "body": [
      "get_subnet_non_routers = function(address, returnNonRouters = true, returnRouters = false)",
      "    locals.target_router = get_router(locals.address)",
      "    if locals.target_router == null then",
      "        return \"router not found.\" ",
      "    end if",
      "",
      "    locals.devices = devices_lan_ip(locals.target_router)",
      "    locals.subnet = []",
      "",
      "    for ip in locals.devices",
      "    if locals.returnNonRouters == true then",
      "        if get_router(locals.ip) == null then",
      "            subnet.push(locals.ip)",
      "        end if",
      "    end if",
      "    if locals.returnRouters == true then",
      "        if typeof(get_router(locals.ip)) == \"router\" then",
      "            subnet.push(locals.ip)",
      "        end if",
      "    end if    ",
      "    end for",
      "    return locals.subnet",
      "end function"
    ]
  },
  "functions: is_null": {
    "prefix": "fn_is_null",
    "scope": "greyscript",
    "description": "Insert is_null (clean, header removed).",
    "body": [
      "is_null = function(testObject)",
      "    if locals.testObject == null then",
      "        return true",
      "    else",
      "        return false",
      "    end if",
      "end function",
      "// @startuml",
      "// start",
      "// if (<color:blue>testObject == null?</color>) then (<color:green>Yes</color>)",
      "//   :<color:purple>return true</color>;",
      "//   stop",
      "// else (<color:blue>No</color>)",
      "//   :<color:purple>return false</color>;",
      "//   stop",
      "// endif",
      "// @enduml"
    ]
  },
  "functions: stack_string": {
    "prefix": "fn_stack_string",
    "scope": "greyscript",
    "description": "Insert stack_string (clean, header removed).",
    "body": [
      "stack_string = function(stackStringTop, stackStringBottom, stackPosition = \"0em\")",
      "      string.pos = function(position = \"0em\")",
      "          return \"<pos=\" + position + \">\" + self + \"</pos>\"",
      "      end function",
      "      string.size = function(position = \"100%\")",
      "          return \"<size=\" + position + \">\" + self + \"</pos>\"",
      "      end function",
      "      string.sub = function",
      "          return \"<sub>\" + self + \"</sub>\"",
      "      end function",
      "      string.sup = function",
      "          return \"<sup>\" + self + \"</sup>\"",
      "      end function",
      "return stackStringTop.pos(stackPosition).sup + stackStringBottom.pos(stackPosition).sub",
      "end function",
      "",
      "//print stack_string(\"420\", \"247\", \"10%\").size(\"100%\")",
      "//print stack_string(\"365\", \"057\", \"2em\").size(\"200%\") + stack_string(\"777\", \"666\", \"155px\").size(\"300%\")"
    ]
  },
  "functions: text_crawl": {
    "prefix": "fn_text_crawl",
    "scope": "greyscript",
    "description": "Insert text_crawl (clean, header removed).",
    "body": [
      "loadText = get_shell.host_computer.File(home_dir + \"${1:/Downloads/fly.txt}\").get_content.split(char(10))",
      "",
      "// your percentage multipliers for each of the 7 lines",
      "multipliers = [5, 25, 45, 65, 80, 90, 100]",
      "",
      "for i in range(0, (loadText.len - multipliers.len) - 1)",
      "    // for each offset 0..6",
      "    for offset in range(0, multipliers.len - 1)",
      "        lineIdx   = i + offset",
      "        pct       = str(multipliers[offset]) + \"%\"",
      "        formatted = loadText[lineIdx].size(pct).align(\"center\")",
      "        print(formatted, true)",
      "    end for",
      "    wait 0.729",
      "end for"
    ]
  },
  "functions: unsafe_check_list": {
    "prefix": "fn_unsafe_check_list",
    "scope": "greyscript",
    "description": "Insert unsafe_check_list (clean, header removed).",
    "body": [
      "\tunsafe_check_list = function(scanResults)",
      "\t\tlocals.scanResults = locals.scanResults.remove(\"decompiling source...\" + char(10) + \"searching unsecure values...\" + char(10))",
      "\t\tlocals.unsafeCheckList = locals.scanResults.split(char(10)*2)",
      "\t\treturn locals.unsafeCheckList",
      "\tend function",
      ""
    ]
  },
  "functions: program_name": {
    "prefix": "fn_program_name",
    "scope": "greyscript",
    "description": "Insert program_name (clean, header removed).",
    "body": [
      "\tprogram_name = function()",
      "\t\tlocals.splitVal = program_path.split(\"/\")",
      "\t\tlocals.splitVal.reverse",
      "\t\treturn trim(locals.splitVal[0])",
      "\tend function"
    ]
  },
  "list: crop": {
    "prefix": "list_crop",
    "scope": "greyscript",
    "description": "Insert crop (clean, header removed).",
    "body": [
      "    list.crop = function()",
      "        while not self[self.len - 1].len > 0",
      "            self.remove(self.len - 1)",
      "        end while",
      "        while not self[0].len > 0",
      "            self.remove(0)",
      "        end while",
      "        return self",
      "    end function",
      "//@name crop",
      "    //  * @startuml",
      "    //  * entity ListObject",
      "    //  * control \".crop\" as crop",
      "    //  *   ListObject -> crop : [//\"\"//,//\"\"//,\"item1\", \"item2\", //\"\"//]",
      "    //  *   crop -> ListObject : [\"item1\", \"item2\"]",
      "    //  * footer",
      "    //  *   list.crop",
      "    //  * endfooter         ",
      "    //  * @enduml         "
    ]
  },
  "list: push_once": {
    "prefix": "list_push_once",
    "scope": "greyscript",
    "description": "Insert push_once (clean, header removed).",
    "body": [
      "map.push_once = function(mapItem)",
      "\tif not self.hasIndex(self.indexOf(mapItem)) then",
      "\t\tself.push(targetIP)",
      "\tend if\t",
      "end function"
    ]
  },
  "list: string": {
    "prefix": "list_string",
    "scope": "greyscript",
    "description": "Insert string (clean, header removed).",
    "body": [
      "list.string = function(seperator = char(10))",
      "    locals.printString = split(self, locals.seperator)",
      "    return locals.printString",
      "end function",
      "    //@name string",
      "        //  * @startuml",
      "        //  * entity ListObject",
      "        //  * interface ScreenOutput",
      "        //  * control \".string\" as string",
      "        //  *   ListObject -> string : list",
      "        //  *   string -> ScreenOutput : string()",
      "        //  * footer",
      "        //  *   list.string",
      "        //  * endfooter         ",
      "        //  * @enduml           "
    ]
  },
  "map: get_attributes": {
    "prefix": "map_get_attributes",
    "scope": "greyscript",
    "description": "Insert get_attributes (clean, header removed).",
    "body": [
      "map.get_attributes = function()",
      "\tlocals.attributeList = []",
      "\tfor param in self[\"__isa\"]",
      "\t\tlocals.attributeList.push(locals.param.key)",
      "\tend for\t",
      "\treturn locals.attributeList",
      "end function"
    ]
  },
  "map: push_once": {
    "prefix": "map_push_once",
    "scope": "greyscript",
    "description": "Insert push_once (clean, header removed).",
    "body": [
      "map.push_once = function(mapItem)",
      "\tif not self.hasIndex(self.indexOf(mapItem)) then",
      "\t\tself.push(targetIP)",
      "\tend if\t",
      "end function"
    ]
  },
  "numbers: div": {
    "prefix": "num_div",
    "scope": "greyscript",
    "description": "Insert div (clean, header removed).",
    "body": [
      "number.div = function(amount = 2)",
      "    if typeof(locals.amount) == \"number\" then",
      "        if locals.amount == 0 then return 0",
      "    end if",
      "        return self / locals.amount",
      "end function   ",
      "// @startuml",
      "// title <color:purple>number.div Method Diagram</color>",
      "// ",
      "// class number {",
      "//   + value : number",
      "//   + div(divisor: number) : number",
      "// }",
      "// ",
      "// note right of number",
      "//   The div method divides the current value by the provided divisor.",
      "//   For example:",
      "//     \u2022 44.div(2) returns 22",
      "//     \u2022 44.div(4) returns 11",
      "// end note",
      "// ",
      "// footer",
      "// Method: number.div(divisor)",
      "// endfooter",
      "// ",
      "// @enduml"
    ]
  },
  "numbers: is_float": {
    "prefix": "num_is_float",
    "scope": "greyscript",
    "description": "Insert is_float (clean, header removed).",
    "body": [
      "number.is_float = function()",
      "\tif str(self).indexOf(\".\") > 0 then return true",
      "    return false",
      "end function"
    ]
  },
  "numbers: is_integer": {
    "prefix": "num_is_integer",
    "scope": "greyscript",
    "description": "Insert is_integer (clean, header removed).",
    "body": [
      "number.is_integer = function()",
      "\tif not self == round(self) then return false",
      "    return true",
      "end function"
    ]
  },
  "numbers: is_less": {
    "prefix": "num_is_less",
    "scope": "greyscript",
    "description": "Insert is_less (clean, header removed).",
    "body": [
      "    number.is_less = function(is_less)",
      "            if locals.is_less < self then return true",
      "            return false",
      "    end function",
      "",
      "    ",
      "",
      "    //@name is_less   ",
      "        //  * @startuml",
      "        //  * entity NumberObject",
      "        //  * control \".lesser_than\" as lesser_than",
      "        //  *   NumberObject -> lesser_than : number",
      "        //  *   lesser_than -> NumberObject : [true / false]     ",
      "        //  * footer",
      "        //  *   number.lesser_than",
      "        //  * endfooter         ",
      "        //  * @enduml "
    ]
  },
  "numbers: is_more": {
    "prefix": "num_is_more",
    "scope": "greyscript",
    "description": "Insert is_more (clean, header removed).",
    "body": [
      "    number.is_more = function(is_more)",
      "            if locals.is_more > self then return true",
      "            return false",
      "    end function",
      "    //@name is_more   ",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity NumberObject",
      "        //  * control \".greater_than\" as greater_than",
      "        //  * NumberObject -> greater_than : number",
      "        //  * greater_than -> NumberObject : [true / false]     ",
      "        //  * footer",
      "        //  * number.greater_than",
      "        //  * endfooter         ",
      "        //  * @enduml     "
    ]
  },
  "numbers: is_negative": {
    "prefix": "num_is_negative",
    "scope": "greyscript",
    "description": "Insert is_negative (clean, header removed).",
    "body": [
      "number.is_negative = function()",
      "    if self < 0 then return true",
      "    return false",
      "end function"
    ]
  },
  "numbers: is_positive": {
    "prefix": "num_is_positive",
    "scope": "greyscript",
    "description": "Insert is_positive (clean, header removed).",
    "body": [
      "number.is_positive = function()",
      "    if self >= 0 then return true",
      "    return false",
      "end function",
      ""
    ]
  },
  "numbers: is_zero": {
    "prefix": "num_is_zero",
    "scope": "greyscript",
    "description": "Insert is_zero (clean, header removed).",
    "body": [
      "number.is_zero = function()",
      "    if self == 0 then return true",
      "    return false",
      "end function"
    ]
  },
  "numbers: clamp": {
    "prefix": "num_clamp",
    "scope": "greyscript",
    "description": "Insert clamp (clean, header removed).",
    "body": [
      "number.clamp = function(min, max)",
      "            if self < locals.min then return locals.min",
      "            if self > locals.max then return locals.max",
      "            return self",
      "end function",
      "// @startuml",
      "// title <color:purple>number.clamp Method Diagram</color>",
      "//",
      "// class NumberObject {",
      "//   + value : number",
      "//   + clamp(min: number, max: number) : number",
      "// }",
      "//",
      "// note bottom of NumberObject",
      "//   Limits the object's value within the specified range.",
      "//   Usage examples:",
      "//     \u2022 7.clamp(2, 6) \u2192 6  (value exceeds max; clamped to 6)",
      "//     \u2022 1.clamp(2, 6) \u2192 2  (value below min; clamped to 2)",
      "// end note",
      "//",
      "// @enduml"
    ]
  },
  "numbers: diff": {
    "prefix": "num_diff",
    "scope": "greyscript",
    "description": "Insert diff (clean, header removed).",
    "body": [
      "    number.diff = function(distanceTo = 0)",
      "            return abs(self - locals.distanceTo)",
      "    end function"
    ]
  },
  "numbers: minus": {
    "prefix": "num_minus",
    "scope": "greyscript",
    "description": "Insert minus (clean, header removed).",
    "body": [
      "    number.minus = function(amount = 1)",
      "            return self - locals.amount",
      "    end function"
    ]
  },
  "numbers: multiply": {
    "prefix": "num_multiply",
    "scope": "greyscript",
    "description": "Insert multiply (clean, header removed).",
    "body": [
      "    number.multiply = function(amount = 2)",
      "            return self * locals.amount",
      "    end function "
    ]
  },
  "numbers: plus": {
    "prefix": "num_plus",
    "scope": "greyscript",
    "description": "Insert plus (clean, header removed).",
    "body": [
      "number.plus = function(amount = 1)",
      "        return self + locals.amount",
      "end function  "
    ]
  },
  "numbers: random_from": {
    "prefix": "num_random_from",
    "scope": "greyscript",
    "description": "Insert random_from (clean, header removed).",
    "body": [
      "    number.random_from = function(min = 0)",
      "            locals.max = self",
      "            return floor((rnd * (locals.max - locals.min + 1)) + locals.min)  ",
      "    end function",
      "   "
    ]
  },
  "numbers: lerp": {
    "prefix": "num_lerp",
    "scope": "greyscript",
    "description": "Insert lerp (clean, header removed).",
    "body": [
      "    number.lerp = function(min, max, offset)",
      "        if locals.offset > 1 then locals.offset = 1",
      "        if locals.offset < 0 then locals.offset = 0",
      "        locals.difference = locals.max - locals.min",
      "        locals.scaled_difference = locals.offset * locals.difference",
      "        return locals.min + locals.scaled_difference",
      "    end function"
    ]
  },
  "router: get_port_info": {
    "prefix": "router_get_port_info",
    "scope": "greyscript",
    "description": "Insert get_port_info (clean, header removed).",
    "body": [
      "map.get_port_info = function(portNumber)",
      "\tif not typeof(self) == \"router\" then return \"<#FF0000>Type Mismatch, object is not a router\"",
      "\tlocals.portObject = self.ping_port(locals.portNumber)",
      "\tif not typeof(locals.portObject) == \"port\" then return \"<#FF0000>Type Mismatch, object is not a port\"",
      "    return self.port_info(locals.portObject)",
      "end function"
    ]
  },
  "str_logic: extract": {
    "prefix": "strlogic_extract",
    "scope": "greyscript",
    "description": "Insert extract (clean, header removed).",
    "body": [
      "string.extract = function(tagStart = \"<b>\", tagEnd = \"</b>\")",
      "    locals.startIndex = self.indexOf(locals.tagStart) + (locals.tagStart.len)",
      "    locals.endIndex = (self.indexOf(locals.tagEnd) - (locals.tagEnd.len - locals.tagStart.len)) + 1",
      "    return slice(self, locals.startIndex, locals.endIndex)",
      "end function",
      "// @startuml",
      "    // start",
      "    // :<color:purple>startIndex = tagStart</color>;",
      "    // :<color:purple>endIndex = tagEnd</color>;",
      "    // :<color:green>return slice(self, startIndex, endIndex)</color>;",
      "    // stop",
      "    // @enduml        "
    ]
  },
  "str_logic: format": {
    "prefix": "strlogic_format",
    "scope": "greyscript",
    "description": "Insert format (clean, header removed).",
    "body": [
      "string.format = function(args, delim=\"%s\")",
      "    locals.splitStr = self.split(locals.delim);",
      "    locals.recompStr = \"\"",
      "    for i in range(0, locals.args.len()-1)",
      "        locals.recompStr = locals.recompStr + locals.splitStr[locals.i] + locals.args[locals.i]  ",
      "    end for",
      "        locals.recompStr = locals.recompStr + locals.splitStr[locals.splitStr.len()-1]",
      "    return locals.recompStr",
      "end function",
      "    // @startuml",
      "    // start",
      "    // :<color:purple>splitStr = self.split(delim)</color>;",
      "    // :<color:purple>recompStr = \"\"</color>;",
      "    // :<color:blue>For i = 0 to args.len()-1</color>;",
      "    // repeat",
      "    //   :<color:purple>recompStr = recompStr + splitStr[i] + args[i]</color>;",
      "    // repeat while (next i exists)",
      "    // :<color:purple>recompStr = recompStr + splitStr[splitStr.len()-1]</color>;",
      "    // :<color:green>return recompStr</color>;",
      "    // stop",
      "    // @enduml"
    ]
  },
  "str_logic: mask": {
    "prefix": "strlogic_mask",
    "scope": "greyscript",
    "description": "Insert mask (clean, header removed).",
    "body": [
      "string.mask = function(maskString = true, maskChar = char(42), maskColor = null)",
      "    if not maskColor == null then maskChar = \"<\" + maskColor + \">\" + maskChar + \"</color>\"",
      "    locals.ipPattern = \"\\b(?:(?:${1:25}[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d).){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\b\"",
      "    locals.matchList = self.matches(locals.ipPattern)",
      "    locals.newString = \"\"",
      "    if locals.maskString == false then return self",
      "    if locals.matchList.len > 0 then",
      "        locals.newString = self",
      "        for match in locals.matchList",
      "            locals.newString = locals.newString.replace(locals.match.value, maskChar*locals.match.value.len)",
      "        end for",
      "        return locals.newString",
      "    else",
      "        return self",
      "    end if",
      "end function"
    ]
  },
  "str_remove: remove_italic": {
    "prefix": "strremove_remove_italic",
    "scope": "greyscript",
    "description": "Insert remove_italic (clean, header removed).",
    "body": [
      "    string.remove_italic = function()",
      "        locals.newString = self.remove(\"<i>\")",
      "        return locals.newString.remove(\"</i>\")",
      "    end function",
      "",
      "",
      "    //@name remove_italic ",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity StringObject",
      "        //  * control \".remove_italic\" as remove_italic",
      "        //  *   StringObject -> remove_italic : //<i>//string//</i>//",
      "        //  *   remove_italic -> StringObject : string",
      "        //  *   StringObject -> remove_italic : //<i>//string//</i>// //<i>//string//</i>//",
      "        //  *   remove_italic -> StringObject : string string",
      "        //  * footer",
      "        //  *   string.remove_italic",
      "        //  * endfooter           ",
      "        //  * @enduml         "
    ]
  },
  "str_remove: remove_mark": {
    "prefix": "strremove_remove_mark",
    "scope": "greyscript",
    "description": "Insert remove_mark (clean, header removed).",
    "body": [
      "    string.remove_mark = function()",
      "        locals.newString = self.remove(\"<mark>\")",
      "        return locals.newString.remove(\"</mark>\")",
      "    end function",
      "",
      "",
      "    //@name remove_mark    ",
      "        //  * **Description:**",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity StringObject",
      "        //  * control \".remove_mark\" as remove_mark",
      "        //  *   StringObject -> remove_mark : //<mark>//string//</mark>//",
      "        //  *   remove_mark -> StringObject : string",
      "        //  *   StringObject -> remove_mark : //<mark>//string//</mark>// //<mark>//string//</mark>//",
      "        //  *   remove_mark -> StringObject : string string   ",
      "        //  * footer",
      "        //  *   string.remove_mark",
      "        //  * endfooter               ",
      "        //  * @enduml            "
    ]
  },
  "str_remove: remove_strike": {
    "prefix": "strremove_remove_strike",
    "scope": "greyscript",
    "description": "Insert remove_strike (clean, header removed).",
    "body": [
      "    string.remove_strike = function()",
      "        locals.newString = self.remove(\"<s>\")",
      "        return locals.newString.remove(\"</s>\")",
      "    end function",
      "",
      "",
      "",
      "    //@name remove_strike    ",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity StringObject",
      "        //  * control \".remove_strike\" as remove_strike",
      "        //  *   StringObject -> remove_strike : //<s>//string//</s>//",
      "        //  *   remove_strike -> StringObject : string",
      "        //  *   StringObject -> remove_strike : //<s>//string//</s>// //<s>//string//</s>//",
      "        //  *   remove_strike -> StringObject : string string",
      "        //  * footer",
      "        //  *   string.remove_strike",
      "        //  * endfooter             ",
      "        //  * @enduml       "
    ]
  },
  "str_remove: remove_sub": {
    "prefix": "strremove_remove_sub",
    "scope": "greyscript",
    "description": "Insert remove_sub (clean, header removed).",
    "body": [
      "    string.remove_sub = function()",
      "        locals.newString = self.remove(\"<sub>\")",
      "        return locals.newString.remove(\"</sub>\")",
      "    end function",
      "",
      "",
      "    //@name remove_sub    ",
      "        //  * **Description:**",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity StringObject",
      "        //  * control \".remove_sub\" as remove_sub",
      "        //  *   StringObject -> remove_sub : //<sub>//string//</sub>//",
      "        //  *   header string.remove_sub",
      "        //  *   remove_sub -> StringObject : string",
      "        //  *   StringObject -> remove_sub : //<sub>//string//</sub>// //<sub>//string//</sub>//",
      "        //  *   remove_sub -> StringObject : string string  ",
      "        //  * footer",
      "        //  *   string.remove_sub",
      "        //  * endfooter          ",
      "        //  * @enduml      "
    ]
  },
  "str_remove: remove_sup": {
    "prefix": "strremove_remove_sup",
    "scope": "greyscript",
    "description": "Insert remove_sup (clean, header removed).",
    "body": [
      "    string.remove_sup = function()",
      "        locals.newString = self.remove(\"<sup>\")",
      "        return locals.newString.remove(\"</sup>\")",
      "    end function",
      "",
      "",
      "    //@name remove_sup",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity StringObject",
      "        //  * control \".remove_sup\" as remove_sup",
      "        //  *   StringObject -> remove_sup : //<sup>//string//</sup>//",
      "        //  *   header string.remove_sup",
      "        //  *   remove_sup -> StringObject : string",
      "        //  *   StringObject -> remove_sup : //<sup>//string//</sup>// //<sup>//string//</sup>//",
      "        //  *   remove_sup -> StringObject : string string  ",
      "        //  * footer",
      "        //  *   string.remove_sup",
      "        //  * endfooter          ",
      "        //  * @enduml         "
    ]
  },
  "str_remove: remove_underline": {
    "prefix": "strremove_remove_underline",
    "scope": "greyscript",
    "description": "Insert remove_underline (clean, header removed).",
    "body": [
      "    string.remove_underline = function()",
      "        locals.newString = self.remove(\"<u>\")",
      "        return locals.newString.remove(\"</u>\")",
      "    end function",
      "",
      "",
      "    //@name remove_underline",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity StringObject",
      "        //  * control \".remove_underline\" as remove_underline",
      "        //  *   StringObject -> remove_underline : //<u>//string//</u>//",
      "        //  *   remove_underline -> StringObject : string",
      "        //  *   StringObject -> remove_underline : //<u>//string//</u>// //<u>//string//</u>//",
      "        //  *   remove_underline -> StringObject : string string ",
      "        //  * footer",
      "        //  *   string.remove_underline",
      "        //  * endfooter           ",
      "        //  * @enduml        "
    ]
  },
  "str_remove: remove_bold": {
    "prefix": "strremove_remove_bold",
    "scope": "greyscript",
    "description": "Insert remove_bold (clean, header removed).",
    "body": [
      "string.remove_bold = function()",
      "    locals.newString = self.remove(\"<b>\")",
      "    return locals.newString.remove(\"</b>\")",
      "end function",
      "//@name remove_bold",
      "    //  * @uml",
      "    //  * @startuml",
      "    //  * entity StringObject",
      "    //  * control \".remove_bold\" as remove_bold",
      "    //  *   StringObject -> remove_bold : //<b>//string//</b>//",
      "    //  *   remove_bold -> StringObject : string",
      "    //  *   StringObject -> remove_bold : //<b>//string//</b>// //<b>//string//</b>//",
      "    //  *   remove_bold -> StringObject : string string",
      "    //  * footer",
      "    //  *   string.remove_bold",
      "    //  * endfooter           ",
      "    //  * @enduml          "
    ]
  },
  "str_remove: remove_char_first": {
    "prefix": "strremove_remove_char_first",
    "scope": "greyscript",
    "description": "Insert remove_char_first (clean, header removed).",
    "body": [
      "    string.remove_char_first = function()",
      "        return slice(self, 1, (self.len))",
      "    end function",
      "",
      "",
      "    //@name remove_char_first",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity StringObject",
      "        //  * control \".remove_char_first\" as remove_char_first",
      "        //  * StringObject -> remove_char_first : string",
      "        //  * remove_char_first -> StringObject : tring",
      "        //  * footer",
      "        //  * string.remove_char_first",
      "        //  * endfooter ",
      "        //  * @enduml       "
    ]
  },
  "str_remove: remove_char_last": {
    "prefix": "strremove_remove_char_last",
    "scope": "greyscript",
    "description": "Insert remove_char_last (clean, header removed).",
    "body": [
      "string.remove_char_last = function()",
      "    return slice(self, 0, (self.len - 1))",
      "end function",
      "    //@name remove_char_last",
      "        //  *",
      "        //  * @uml",
      "        //  * @startuml",
      "        //  * entity StringObject",
      "        //  * control \".remove_char_last\" as remove_char_last",
      "        //  * StringObject -> remove_char_last : string",
      "        //  * remove_char_last -> StringObject : strin",
      "        //  * footer",
      "        //  * string.remove_char_last",
      "        //  * endfooter ",
      "        //  * @enduml        "
    ]
  },
  "str_textmeshpro: italic": {
    "prefix": "strtmp_italic",
    "scope": "greyscript",
    "description": "Insert italic (clean, header removed).",
    "body": [
      "string.italic = function()",
      "    return \"<i>\" + self + \"</i>\"",
      "end function    "
    ]
  },
  "str_textmeshpro: line_indent": {
    "prefix": "strtmp_line_indent",
    "scope": "greyscript",
    "description": "Insert line_indent (clean, header removed).",
    "body": [
      "string.line_indent = function(lineIndent = \"15%\", closeTag = true)",
      "    if locals.closeTag == false then",
      "        return \"<line-indent=\" + locals.lineIndent + \">\" + self",
      "    else",
      "        return \"<line-indent=\" + locals.lineIndent + \">\" + self + \"</line-indent>\"",
      "    end if",
      "    return null",
      "end function    "
    ]
  },
  "str_textmeshpro: lowercase": {
    "prefix": "strtmp_lowercase",
    "scope": "greyscript",
    "description": "Insert lowercase (clean, header removed).",
    "body": [
      "string.lowercase = function()",
      "    return \"<lowercase>\" + self + \"</lowercase>\"",
      "end function    "
    ]
  },
  "str_textmeshpro: margin": {
    "prefix": "strtmp_margin",
    "scope": "greyscript",
    "description": "Insert margin (clean, header removed).",
    "body": [
      "string.margin = function(marginSpace = \"5em\")",
      "    return \"<margin=\" + locals.marginSpace + \">\" + self + \"</margin>\"",
      "end function ",
      ""
    ]
  },
  "str_textmeshpro: align": {
    "prefix": "strtmp_align",
    "scope": "greyscript",
    "description": "Insert align (clean, header removed).",
    "body": [
      "string.align = function(alignment = \"center\", closeTag = true)",
      "    locals.newString = \"<align=\" + locals.alignment + \">\" + self",
      "    if locals.closeTag == true then locals.newString = locals.newString + \"</align>\"",
      "    return locals.newString",
      "end function        "
    ]
  },
  "str_textmeshpro: alpha": {
    "prefix": "strtmp_alpha",
    "scope": "greyscript",
    "description": "Insert alpha (clean, header removed).",
    "body": [
      "string.alpha = function(hexOpacity = \"#FF\")",
      "    return \"<alpha=\" + locals.hexOpacity + \">\" + self",
      "end function"
    ]
  },
  "str_textmeshpro: bold": {
    "prefix": "strtmp_bold",
    "scope": "greyscript",
    "description": "Insert bold (clean, header removed).",
    "body": [
      "string.bold = function()",
      "    return \"<b>\" + self + \"</b>\"",
      "end function  "
    ]
  },
  "str_textmeshpro: color": {
    "prefix": "strtmp_color",
    "scope": "greyscript",
    "description": "Insert color (clean, header removed).",
    "body": [
      "string.color = function(colorValue)",
      "\tif not typeof(colorValue) == \"string\" then return self",
      "\t//*****************************************************",
      "\t// Red HEX Codes",
      "\t//*****************************************************\t",
      "\tif colorValue == \"IndianRed\" then colorValue = \"#CD5C5C\"",
      "\tif colorValue == \"LightCoral\" then colorValue = \"#F08080\"",
      "\tif colorValue == \"Salmon\" then colorValue = \"#FA8072\"",
      "\tif colorValue == \"DarkSalmon\" then colorValue = \"#E9967A\"",
      "\tif colorValue == \"LightSalmon\" then colorValue = \"#FFA07A\"\t\t\t",
      "\tif colorValue == \"Crimson\" then colorValue = \"#DC143C\"",
      "\tif colorValue == \"Red\" then colorValue = \"#FF0000\"",
      "\tif colorValue == \"FireBrick\" then colorValue = \"#B22222\"",
      "\tif colorValue == \"DarkRed\" then colorValue = \"#8B0000\"",
      "\t//*****************************************************",
      "\t// Pink HEX Codes",
      "\t//*****************************************************\t\t",
      "\tif colorValue == \"Pink\" then colorValue = \"#FFC0CB\"",
      "\tif colorValue == \"LightPink\" then colorValue = \"#FFB6C1\"\t\t",
      "\tif colorValue == \"HotPink\" then colorValue = \"#FF69B4\"\t\t",
      "\tif colorValue == \"DeepPink\" then colorValue = \"#FF1493\"\t\t",
      "\tif colorValue == \"MediumVioletRed\" then colorValue = \"#C71585\"\t\t\t\t",
      "\tif colorValue == \"PaleVioletRed\" then colorValue = \"#DB7093\"\t\t\t\t",
      "\t//*****************************************************",
      "\t// Orange HEX Codes",
      "\t//*****************************************************\t\t\t\t\t",
      "\tif colorValue == \"Coral\" then colorValue = \"#FF7F50\"\t\t\t\t\t\t",
      "\tif colorValue == \"Tomato\" then colorValue = \"#FF6347\"\t\t\t\t",
      "\tif colorValue == \"OrangeRed\" then colorValue = \"#FF4500\"\t\t\t\t\t\t",
      "\tif colorValue == \"DarkOrange\" then colorValue = \"#FF8C00\"\t\t\t\t",
      "\tif colorValue == \"Orange\" then colorValue = \"#FFA500\"\t\t\t\t\t\t",
      "\t//*****************************************************",
      "\t// Yellow HEX Codes",
      "\t//*****************************************************",
      "\tif colorValue == \"Gold\" then colorValue = \"#FFD700\"",
      "\tif colorValue == \"Yellow\" then colorValue = \"#FFFF00\"",
      "\tif colorValue == \"LightYellow\" then colorValue = \"#FFFFE0\"",
      "\tif colorValue == \"LemonChiffon\" then colorValue = \"#FFFACD\"",
      "\tif colorValue == \"LightGoldenrodYellow\" then colorValue = \"#FAFAD2\"        ",
      "\tif colorValue == \"PapayaWhip\" then colorValue = \"#FFEFD5\"",
      "\tif colorValue == \"Moccasin\" then colorValue = \"#FFE4B5\"",
      "\tif colorValue == \"PeachPuff\" then colorValue = \"#FFDAB9\"",
      "\tif colorValue == \"PaleGoldenrod\" then colorValue = \"#EEE8AA\"",
      "\tif colorValue == \"Khaki\" then colorValue = \"#F0E68C\"                                \t\t\t\t\t",
      "\tif colorValue == \"DarkKhaki\" then colorValue = \"#BDB76B\"                                \t\t\t\t\t        ",
      "\t//*****************************************************",
      "\t// Purple HEX Codes",
      "\t//*****************************************************",
      "\tif colorValue == \"Lavender\" then colorValue = \"#E6E6FA\"",
      "\tif colorValue == \"Thistle\" then colorValue = \"#D8BFD8\"",
      "\tif colorValue == \"Plum\" then colorValue = \"#DDA0DD\"",
      "\tif colorValue == \"Violet\" then colorValue = \"#EE82EE\"",
      "\tif colorValue == \"Orchid\" then colorValue = \"#DA70D6\"        ",
      "\tif colorValue == \"Fuchsia\" then colorValue = \"#FF00FF\"",
      "\tif colorValue == \"Magenta\" then colorValue = \"#FF00FF\"",
      "\tif colorValue == \"MediumOrchid\" then colorValue = \"#BA55D3\"",
      "\tif colorValue == \"MediumPurple\" then colorValue = \"#9370DB\"",
      "\tif colorValue == \"RebeccaPurple\" then colorValue = \"#663399\"                                \t\t\t\t\t",
      "\tif colorValue == \"BlueViolet\" then colorValue = \"#8A2BE2\"",
      "\tif colorValue == \"DarkViolet\" then colorValue = \"#9400D3\"",
      "\tif colorValue == \"DarkOrchid\" then colorValue = \"#9932CC\"",
      "\tif colorValue == \"DarkMagenta\" then colorValue = \"#8B008B\"",
      "\tif colorValue == \"Purple\" then colorValue = \"#800080\"",
      "\tif colorValue == \"Indigo\" then colorValue = \"#4B0082\"        ",
      "\tif colorValue == \"SlateBlue\" then colorValue = \"#6A5ACD\"",
      "\tif colorValue == \"DarkSlateBlue\" then colorValue = \"#483D8B\"",
      "\t//*****************************************************",
      "\t// Green HEX Codes",
      "\t//*****************************************************",
      "\tif colorValue == \"GreenYellow\" then colorValue = \"#ADFF2F\"",
      "\tif colorValue == \"Chartreuse\" then colorValue = \"#7FFF00\"",
      "\tif colorValue == \"LawnGreen\" then colorValue = \"#7CFC00\"",
      "\tif colorValue == \"Lime\" then colorValue = \"#00FF00\"",
      "\tif colorValue == \"LimeGreen\" then colorValue = \"#32CD32\"        ",
      "\tif colorValue == \"PaleGreen\" then colorValue = \"#98FB98\"",
      "\tif colorValue == \"LightGreen\" then colorValue = \"#90EE90\"",
      "\tif colorValue == \"MediumSpringGreen\" then colorValue = \"#00FA9A\"",
      "\tif colorValue == \"SpringGreen\" then colorValue = \"#00FF7F\"",
      "\tif colorValue == \"SeaGreen\" then colorValue = \"#2E8B57\"",
      "\tif colorValue == \"ForestGreen\" then colorValue = \"#228B22\"                                \t\t\t\t\t",
      "\tif colorValue == \"Green\" then colorValue = \"#008000\"",
      "\tif colorValue == \"DarkGreen\" then colorValue = \"#006400\"",
      "\tif colorValue == \"YellowGreen\" then colorValue = \"#9ACD32\"",
      "\tif colorValue == \"OliveDrab\" then colorValue = \"#6B8E23\"",
      "\tif colorValue == \"Olive\" then colorValue = \"#808000\"",
      "\tif colorValue == \"DarkOliveGreen\" then colorValue = \"#556B2F\"        ",
      "\tif colorValue == \"MediumAquamarine\" then colorValue = \"#66CDAA\"",
      "\tif colorValue == \"DarkSeaGreen\" then colorValue = \"#8FBC8B\"",
      "\tif colorValue == \"LightSeaGreen\" then colorValue = \"#20B2AA\" ",
      "\tif colorValue == \"DarkCyan\" then colorValue = \"#008B8B\"        ",
      "\tif colorValue == \"Teal\" then colorValue = \"#008080\"",
      "\t//*****************************************************",
      "\t// Blue HEX Codes",
      "\t//*****************************************************\t",
      "\tif colorValue == \"Aqua\" then colorValue = \"#00FFFF\"",
      "\tif colorValue == \"Cyan\" then colorValue = \"#00FFFF\"",
      "\tif colorValue == \"LightCyan\" then colorValue = \"#E0FFFF\"",
      "\tif colorValue == \"PaleTurquoise\" then colorValue = \"#AFEEEE\"",
      "\tif colorValue == \"Aquamarine\" then colorValue = \"#7FFFD4\"        ",
      "\tif colorValue == \"Turquoise\" then colorValue = \"#40E0D0\"",
      "\tif colorValue == \"MediumTurquoise\" then colorValue = \"#48D1CC\"",
      "\tif colorValue == \"DarkTurquoise\" then colorValue = \"#00CED1\"",
      "\tif colorValue == \"CadetBlue\" then colorValue = \"#5F9EA0\"",
      "\tif colorValue == \"SteelBlue\" then colorValue = \"#4682B4\"                           \t\t\t\t\t",
      "\tif colorValue == \"LightSteelBlue\" then colorValue = \"#B0C4DE\"",
      "\tif colorValue == \"PowderBlue\" then colorValue = \"#B0E0E6\"",
      "\tif colorValue == \"LightBlue\" then colorValue = \"#ADD8E6\"",
      "\tif colorValue == \"SkyBlue\" then colorValue = \"#87CEEB\"",
      "\tif colorValue == \"LightSkyBlue\" then colorValue = \"#87CEFA\"",
      "\tif colorValue == \"DeepSkyBlue\" then colorValue = \"#00BFFF\"        ",
      "\tif colorValue == \"DodgerBlue\" then colorValue = \"#1E90FF\"",
      "\tif colorValue == \"CornflowerBlue\" then colorValue = \"#6495ED\"",
      "\tif colorValue == \"MediumSlateBlue\" then colorValue = \"#7B68EE\"",
      "\tif colorValue == \"RoyalBlue\" then colorValue = \"#4169E1\"",
      "\tif colorValue == \"Blue\" then colorValue = \"#0000FF\"",
      "\tif colorValue == \"MediumBlue\" then colorValue = \"#0000CD\"",
      "\tif colorValue == \"DarkBlue\" then colorValue = \"#00008B\"  ",
      "\tif colorValue == \"Navy\" then colorValue = \"#000080\"",
      "\tif colorValue == \"MidnightBlue\" then colorValue = \"#191970\"                        ",
      "\t//*****************************************************",
      "\t// Brown HEX Codes",
      "\t//*****************************************************\t",
      "\tif colorValue == \"Cornsilk\" then colorValue = \"#FFF8DC\"",
      "\tif colorValue == \"BlanchedAlmond\" then colorValue = \"#FFEBCD\"",
      "\tif colorValue == \"Bisque\" then colorValue = \"#FFE4C4\"",
      "\tif colorValue == \"NavajoWhite\" then colorValue = \"#FFDEAD\"",
      "\tif colorValue == \"Wheat\" then colorValue = \"#F5DEB3\"        ",
      "\tif colorValue == \"BurlyWood\" then colorValue = \"#DEB887\"",
      "\tif colorValue == \"Tan\" then colorValue = \"#D2B48C\"",
      "\tif colorValue == \"RosyBrown\" then colorValue = \"#BC8F8F\"",
      "\tif colorValue == \"SandyBrown\" then colorValue = \"#F4A460\"",
      "\tif colorValue == \"Goldenrod\" then colorValue = \"#DAA520\"                                \t\t\t\t\t",
      "\tif colorValue == \"DarkGoldenrod\" then colorValue = \"#B8860B\"",
      "\tif colorValue == \"Peru\" then colorValue = \"#CD853F\"",
      "\tif colorValue == \"Chocolate\" then colorValue = \"#D2691E\"",
      "\tif colorValue == \"SaddleBrown\" then colorValue = \"#8B4513\"",
      "\tif colorValue == \"Sienna\" then colorValue = \"#A0522D\"",
      "\tif colorValue == \"Brown\" then colorValue = \"#A52A2A\"        ",
      "\tif colorValue == \"Maroon\" then colorValue = \"#800000\"          \t\t\t",
      "\t//*****************************************************",
      "\t// White HEX Codes",
      "\t//*****************************************************\t",
      "\tif colorValue == \"White\" then colorValue = \"#FFFFFF\"",
      "\tif colorValue == \"Snow\" then colorValue = \"#FFFAFA\"",
      "\tif colorValue == \"HoneyDew\" then colorValue = \"#F0FFF0\"",
      "\tif colorValue == \"MintCream\" then colorValue = \"#F5FFFA\"",
      "\tif colorValue == \"Azure\" then colorValue = \"#F0FFFF\"        ",
      "\tif colorValue == \"AliceBlue\" then colorValue = \"#F0F8FF\"",
      "\tif colorValue == \"GhostWhite\" then colorValue = \"#F8F8FF\"",
      "\tif colorValue == \"WhiteSmoke\" then colorValue = \"#F5F5F5\"",
      "\tif colorValue == \"SeaShell\" then colorValue = \"#FFF5EE\"",
      "\tif colorValue == \"Beige\" then colorValue = \"#F5F5DC\"                                \t\t\t\t\t",
      "\tif colorValue == \"OldLace\" then colorValue = \"#FDF5E6\"",
      "\tif colorValue == \"FloralWhite\" then colorValue = \"#FFFAF0\"",
      "\tif colorValue == \"Ivory\" then colorValue = \"#FFFFF0\"",
      "\tif colorValue == \"AntiqueWhite\" then colorValue = \"#FAEBD7\"",
      "\tif colorValue == \"Linen\" then colorValue = \"#FAF0E6\"",
      "\tif colorValue == \"LavenderBlush\" then colorValue = \"#FFF0F5\"        ",
      "\tif colorValue == \"MistyRose\" then colorValue = \"#FFE4E1\"",
      "\t//*****************************************************",
      "\t// Grey HEX Codes",
      "\t//*****************************************************\t",
      "\tif colorValue == \"Gainsboro\" then colorValue = \"#DCDCDC\"",
      "\tif colorValue == \"LightGray\" then colorValue = \"#D3D3D3\"",
      "\tif colorValue == \"Silver\" then colorValue = \"#C0C0C0\"",
      "\tif colorValue == \"DarkGray\" then colorValue = \"#A9A9A9\"",
      "\tif colorValue == \"Gray\" then colorValue = \"#808080\"        ",
      "\tif colorValue == \"DimGray\" then colorValue = \"#696969\"",
      "\tif colorValue == \"LightSlateGray\" then colorValue = \"#778899\"",
      "\tif colorValue == \"SlateGray\" then colorValue = \"#708090\"",
      "\tif colorValue == \"DarkSlateGray\" then colorValue = \"#2F4F4F\"",
      "\tif colorValue == \"Black\" then colorValue = \"#000000\"",
      "\t//*****************************************************                                      \t\t\t\t\t   \t",
      "\treturn \"<color=\" + colorValue + \">\" + self + \"</color>\"",
      "end function",
      "",
      ""
    ]
  },
  "str_textmeshpro: cspace": {
    "prefix": "strtmp_cspace",
    "scope": "greyscript",
    "description": "Insert cspace (clean, header removed).",
    "body": [
      "string.cspace = function(charSpacing = \"1em\", closeTag = true)",
      "    if locals.closeTag == true then",
      "        return \"<cspace=\" + locals.charSpacing + \">\" + self + \"</cspace>\"",
      "    end if",
      "    if locals.closeTag == false then",
      "        return \"<cspace=\" + locals.charSpacing + \">\" + self",
      "    end if        ",
      "end function ",
      "",
      ""
    ]
  },
  "str_textmeshpro: indent": {
    "prefix": "strtmp_indent",
    "scope": "greyscript",
    "description": "Insert indent (clean, header removed).",
    "body": [
      "string.indent = function(indentPercent=\"15%\", closeTag = true)",
      "    if locals.closeTag == false then",
      "        return \"<indent=\" + locals.indentPercent + \">\" + self",
      "    else",
      "        return \"<indent=\" + locals.indentPercent + \">\" + self + \"</indent>\"",
      "    end if",
      "    return null",
      "end function "
    ]
  },
  "str_textmeshpro: mspace": {
    "prefix": "strtmp_mspace",
    "scope": "greyscript",
    "description": "Insert mspace (clean, header removed).",
    "body": [
      "string.mspace = function(monospace = \"2.75em\")",
      "    return \"<mspace=\" + locals.monospace + \">\" + self + \"</mspace>\"",
      "end function   "
    ]
  },
  "str_textmeshpro: nobr": {
    "prefix": "strtmp_nobr",
    "scope": "greyscript",
    "description": "Insert nobr (clean, header removed).",
    "body": [
      "string.nobr = function()",
      "    return \"<nobr>\" + self + \"</nobr>\"",
      "end function "
    ]
  },
  "str_textmeshpro: noparse": {
    "prefix": "strtmp_noparse",
    "scope": "greyscript",
    "description": "Insert noparse (clean, header removed).",
    "body": [
      "string.noparse = function()",
      "    return \"<noparse>\" + self + \"</noparse>\"",
      "end function  "
    ]
  },
  "str_textmeshpro: page": {
    "prefix": "strtmp_page",
    "scope": "greyscript",
    "description": "Insert page (clean, header removed).",
    "body": [
      "    string.page = function()",
      "        return self + \"<page>\"",
      "    end function "
    ]
  },
  "str_textmeshpro: pos": {
    "prefix": "strtmp_pos",
    "scope": "greyscript",
    "description": "Insert pos (clean, header removed).",
    "body": [
      "string.pos = function(position = \"50%\")",
      "    return \"<pos=\" + locals.position + \">\" + self",
      "end function"
    ]
  },
  "str_textmeshpro: size": {
    "prefix": "strtmp_size",
    "scope": "greyscript",
    "description": "Insert size (clean, header removed).",
    "body": [
      "string.size = function(textSize = \"5em\")",
      "    return \"<size=\" + locals.textSize + \">\" + self + \"</size>\"",
      "end function"
    ]
  },
  "str_textmeshpro: strike": {
    "prefix": "strtmp_strike",
    "scope": "greyscript",
    "description": "Insert strike (clean, header removed).",
    "body": [
      "    string.strike = function()",
      "        return \"<s>\" + self + \"</s>\"",
      "    end function"
    ]
  },
  "str_textmeshpro: mark": {
    "prefix": "strtmp_mark",
    "scope": "greyscript",
    "description": "Insert mark (clean, header removed).",
    "body": [
      "string.mark = function(color=\"#FFFF00BF\")",
      "    return \"<mark=\" + locals.color + \">\" + self + \"</mark>\"",
      "end function ",
      ""
    ]
  }
}