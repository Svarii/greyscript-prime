// Extracts the first IPv4 address found in a string
// @description **Description:**
// @description Scans a string for a valid IPv4 address and returns the first match.
// @description Returns `null` if no valid IP address is found.
// @description ---
//
// @description **Parameters:**
// @param {string} inputString
// @description - `inputString`:`string` | The text string to search for an IP address.
//
// @description **Parameter Defaults:**
// @description - `none`
//
// @description **Return:**
// @return {string | null}
// @description `string` The first matching IPv4 address, or `null` if none is found.
// @description ---
//
// @description **Notes:**
// @description - Uses a regular expression to identify IPv4 patterns.
// @description - Only the **first** valid match is returned.
// @description ---
//
// @description **Author:** Svarii
// @description **Version:** 0.0.1
// @description ---
//
// @example 
// print(extractIP("My IP is 192.168.1.5")) 
// Output: 192.168.1.5
//
// @example 
// print(extractIP("No IP here")) 
// Output: null
//
// @example 
// print(extractIP("IPs: 10.0.0.1, 172.16.0.1")) 
// Output: 10.0.0.1
extractIP = function(inputString)
    locals.ipPattern = "\b(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)\b"
    locals.matchResult = inputString.matches(locals.ipPattern)
    if locals.matchResult.values.len > 0 then
        return locals.matchResult.values[0]
    else
        return null
    end if
end function