// Find Vulnerable Addresses
// @description **Description:**
// @description Scan a library for vulnerable addresses
// @description ---
//
// @description **Parameters:**
// @param {string} libLocation
// @description - `libLocation`:`<string>` Remote IP Address or local absolute file location
// @param {map<string,function>} `metaxploitObject`:`<metaxploitLib>`
// @description - `metaxploitObject`:`<metaxploitLib>`
// @param {flag} [remoteTarget]
// @description - `remoteTarget`:`<flag>`
// @param {number} [targetPort]
// @description - `targetPort`:`<number>`
//
// @description **Parameter Defaults:**
// @description - `remoteTarget`:`false`
// @description - `targetPort`:`0`
//
// @description **Return:**
// @return {list<string>}
// @description `list`
// @description ---
//    
// @description **Author:** Svarii
// @description **Version:** 0.0.1
// @description --- 
//
// @example libLocation = params[0]
// @example metax = include_lib("/lib/metaxploit.so")
// @example
// print find_exploitable_addresses(libLocation, metax)
find_exploitable_addresses = function(libLocation, metaxploitObject, remoteTarget = false, targetPort = 0)
    locals.metax = locals.metaxploitObject
		if locals.remoteTarget == false then
        	locals.metaLib = locals.metax.load(locals.libLocation)
		else
			locals.netSession = locals.metax.net_use(locals.libLocation, locals.targetPort)
			locals.metaLib = locals.netSession.dump_lib
		end if
		locals.libScanResult = locals.metax.scan(locals.metaLib)
        return locals.libScanResult
end function
// @startuml
// start
// :<color:purple>metax = metaxploitObject</color>;
// if (<color:blue>remoteTarget == false?</color>) then (<color:green>Yes</color>)
//   :<color:purple>metaLib = metax.load(libLocation)</color>;
// else (<color:green>No</color>)
//   :<color:purple>metaLib = metax.net_use(libLocation, to_int(targetPort))</color>;
// endif
// :<color:purple>libScanResult = metax.scan(metaLib)</color>;
// :<color:green>return libScanResult</color>;
// stop
// @enduml