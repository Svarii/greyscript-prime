// @startuml
// title <color:purple>fetch_whois Function Overview</color>
//
// class fetch_whois {
//   .. <color:blue>Input</color> ..
//   + routerPublicIPAddress : string
//
//   .. <color:blue>Return</color> ..
//   + returns : whoisInfo
// }
//
// class whoisInfo {
//   .. <color:blue>Standard Whois Fields</color> ..
//   + admin : string
//   + domain : string
//   + email : string
//   + phone : string
//   + network : string
//
//   .. <color:blue>Error Handling</color> ..
//   + error : string
// }
//
// fetch_whois -right-> whoisInfo : creates instance of
//
// note bottom of whoisInfo
//   * Contains IP registration and contact metadata
//   * Fields populated from WHOIS lookup
//   * On error, only `.error` is set
// end note
//
// note bottom of fetch_whois
//   * Validates that IP is public and well-formed
//   * Rejects LAN addresses and malformed input
//   * Uses `whois()` to extract structured details
// end note
//
// @enduml

// Pull whosis information from a public ip address
	// @description **Description:**
	// Return map with whois information
	// @description ---
	//
	// @description **Parameters:**
	// @param {string} routerPublicIPAddress
	// @description - `routerPublicIPAddress`:`<string>`
	//
	// @description **Parameter Defaults:**
	// @description - `none`
	//
	// @description **Return:**
	// @return {map<string,string>}
	// @description `map`:`whoisInfo`
	// @description - `.admin`:`<string>` The administrative contacts' name
	// @description - `.domain`:`<string>` The domain name of the ip address
	// @description - `.email`:`<string>` The email address for the administrative contact
	// @description - `.network`:`<string>` The network identifier (if any)
	// @description - `.phone`:`<string>` The phone number for the administrative contract
	// @description ---	
	// @description - - `.error`:`<string>` {on error} will return obect with only this property
	// @description ---
	//    
	// @description **Author:** Svarii
	// @description **Version:** 0.0.1
	// @description ---
	// 
	// @example whoisInfo = fetch_whois(params[0])
	// @example
	// print whoisInfo.domain
	// @example
	// print whoisInfo.admin
	// @example
	// print whoisInfo.email
	// @example
	// print whoisInfo.phone
	// @example
	// print whoisInfo.network
fetch_whois = function(routerPublicIPAddress)
	if not is_lan_ip(locals.routerPublicIPAddress) == true then
		if is_valid_ip(routerPublicIPAddress) then
			locals.whoisInfo = {"classID":"whoisInfo", "admin":"", "domain":"", "email":"", "network":"", "phone":"", "error":null}
			locals.what = split(whois(locals.routerPublicIPAddress), "\n")
			locals.whoisInfo.domain = str(split(locals.what[0], ":")[1]).trim
			locals.whoisInfo.admin = str(split(locals.what[1], ":")[1]).trim
			locals.whoisInfo.email = str(split(locals.what[2], ":")[1]).trim
			locals.whoisInfo.phone = str(split(locals.what[3], ":")[1]).trim
			if locals.what.len >= 5 then
				locals.whoisInfo.network = str(split(locals.what[4], ":")[0]).trim
			else
				locals.whoisInfo.network = "[ UNKNOWN ]"
			end if
		else 
			locals.whoisInfo = {"classID":"whoisInfo", "error":"Invalid Public IP Address Provided."}	
		end if
	else
		locals.whoisInfo = {"classID":"whoisInfo", "error":"Needs Public IP, Provided Local IP."}
	end if
	locals.whoisInfo.error = false
	return locals.whoisInfo
end function


