// Keeps a number within a specified range
	// @description **Description:**
	// @description Ensure an number stays between a minimim and maximum value
	// @description ---
	//
	// @description **Parameters:**
    // @param {number} min - The mix threshold.
    // @param {number} max - The max threshold.    
	// @description - `min` The mix threshold.
    // @description - `max` The max threshold.
    //
	// @description **Parameter Defaults:**
    // @description - none
    // @description ---
    //
	// @description **Return:**
	// @return {number} he result of the clamp
	// @description `number` clamped number
	// @description ---
	//
	// @description **Author:** Svarii
	// @description **Version:** 0.0.1
	// @description ---
	//
	// @example myNumber = 42
    // @example
    // print myNumber.clamp(42, 100) // Return 42
    // @example
    // print myNumber.clamp(75, 100) // Return 75
    // @example
    // print myNumber.clamp(0, 40) // Return 40
	// @description ---
number.clamp = function(min, max)
            if self < locals.min then return locals.min
            if self > locals.max then return locals.max
            return self
end function
	// @startuml
	// title <color:purple>number.clamp Method Diagram</color>
	// 
	// class NumberObject {
	//   + value : number
	//   + clamp(min: number, max: number) : number
	// }
	// 
	// note right of NumberObject
	//   The clamp method limits the value to a given range.
	//   For example:
	//     • 7.clamp(2,6) returns 6 (upper bound enforced)
	//     • 1.clamp(2,6) returns 2 (lower bound enforced)
	// end note
	// 
	// @enduml

    // Return difference to number
        // @description **Description:**
	// @description The difference between number and provided number
	// @description ---
	//
	// @description **Parameters:**
        // @param {number} distanceTo - The value to compare
        // @description - `distanceTo` The value to compare
        //
	// @description **Parameter Defaults:**
        // @description - `distanceTo`:`0`
        // @description ---
        //
	// @description **Return:**
	// @return {number} the difference between the numbers
	// @description `number` difference between numbers
	// @description ---
	//
	// @description **Author:** Svarii
	// @description **Version:** 0.0.1
	// @description ---
	//
	// @example myNumber = 42
        // @example
        // print myNumber.diff(42, 100) // Return 57
        // @example
        // print myNumber.diff(75, 100) // Return 25
        // @example
        // print myNumber.diff(0, 40) // Return 40
	// @description ---
    number.diff = function(distanceTo = 0)
            return abs(self - locals.distanceTo)
    end function
    //@name diff
// @startuml
// title <color:purple>number.diff Method Diagram</color>
// 
// class number {
//   + value : number
//   + diff(number) : number
// }
// 
// note right of number
//   The diff method subtracts the provided value from the current number.
//   For example: 44.diff(2) returns 42.
// end note
// 
// footer
// Method: number.diff(subtrahend)
// endfooter
// 
// @enduml

      

        //  **Description:**
        //  
        //  @description     
        
        //  
        
// Divide a number
    // @description **Description:**
    // @description Divide 2 from the number or optional amount
	// @description ---
	//
	// @description **Parameters:**
    // @param {number} [amount] - The amount to div by
    // @description - `amount` The amount to div by
    //
	// @description **Parameter Defaults:**
    // @description - `distanceTo`:`0`
    // @description ---
    //
	// @description **Return:**
	// @return {number} - The result of the division
	// @description `number` The result of the division
	// @description ---
	//
	// @description **Author:** Svarii
	// @description **Version:** 0.0.1
	// @description ---
	//
	// @example myNumber = 42
    // @example
    // print myNumber.div // Return 21
    // @example
    // print myNumber.div(21) // Return 2
    // @example
    // print myNumber.div(0) // Return 0
	// @description ---        
number.div = function(amount = 2)
    if typeof(locals.amount) == "number" then
        if locals.amount == 0 then return 0
    end if
        return self / locals.amount
end function   
// @startuml
// title <color:purple>number.div Method Diagram</color>
// 
// class number {
//   + value : number
//   + div(divisor: number) : number
// }
// 
// note right of number
//   The div method divides the current value by the provided divisor.
//   For example:
//     • 44.div(2) returns 22
//     • 44.div(4) returns 11
// end note
// 
// footer
// Method: number.div(divisor)
// endfooter
// 
// @enduml

number.is_float = function()
	if str(self).indexOf(".") > 0 then return true
    return false
end function

//TESTED

number.is_integer = function()
	if not self == round(self) then return false
    return true
end function


        
        //  **Description:**
        //  Check if number is lesser than provided number   
        //  @param {number} amount
        //  @return {true<bool> | false<bool>} - The result of the subtraction.
        //  @example myNumber = 42;
        //  @example myNumber2 = 100;
        //  @example 
        //  @example result = newNumber.is_less(myNumber2);
        //  @example
        //  print(result); // Outputs: false
    number.is_less = function(is_less)
            if locals.is_less < self then return true
            return false
    end function

    

    //@name is_less   
        //  * @startuml
        //  * entity NumberObject
        //  * control ".lesser_than" as lesser_than
        //  *   NumberObject -> lesser_than : number
        //  *   lesser_than -> NumberObject : [true / false]     
        //  * footer
        //  *   number.lesser_than
        //  * endfooter         
        //  * @enduml 

        

        //  **Description:**
        //  Check if number is greater than provided number
        //  @param {number} is_more
        //  @return {true<bool> | false<bool>} - The result of the subtraction.
        //  @example myNumber = 42;
        //  @example myNumber2 = 100;
        //  @example 
        //  @example result = newNumber.is_more(myNumber2);
        //  @example        
        //  print(result); // Outputs: false
    number.is_more = function(is_more)
            if locals.is_more > self then return true
            return false
    end function
    //@name is_more   
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".greater_than" as greater_than
        //  * NumberObject -> greater_than : number
        //  * greater_than -> NumberObject : [true / false]     
        //  * footer
        //  * number.greater_than
        //  * endfooter         
        //  * @enduml     

number.is_negative = function()
    if str(self).indexOf("-") == 0 then return true
    return false
end function

number.is_positive = function()
    if str(self).indexOf("-") == 0 then return false
    return true
end function

number.is_zero = function()
    if self == 0 then return true
    return false
end function



    //  **Description:**
//  Computes the linear interpolation (lerp) between two numbers.
//  @description Calculates an intermediate value between a start and an end number based on a provided interpolation factor.
//  @param {number} min - The starting value.
//  @param {number} max - The ending value.
//  @param {number} offset - The interpolation factor where 0 returns start, 1 returns end, and values in between yield a proportional blend.
//  @return {number} - The interpolated value.
//  @example min = 10
//  @example max = 20
//  @example offset = 0.5
//  @example result = lerp(min, max, offset);
//  @example print(result); // Output: 15
    number.lerp = function(min, max, offset)
        if locals.offset > 1 then locals.offset = 1
        if locals.offset < 0 then locals.offset = 0
        locals.difference = locals.max - locals.min
        locals.scaled_difference = locals.offset * locals.difference
        return locals.min + locals.scaled_difference
    end function


    //@name minus
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".minus" as minus
        //  * NumberObject -> minus : number
        //  * minus -> NumberObject : (number - 1)
        //  * NumberObject -> minus : number(7)
        //  * minus -> NumberObject : (number - 7)        
        //  * footer
        //  * number.minus
        //  * endfooter         
        //  * @enduml         

        //  **Description:**
        //  Subtract 1 from the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to add.
        //  @return {number} - The result of the subtraction.
        //  @example newNumber = 44
        //  @example 
        //  @example result = newNumber.minus(2)
        //  @example        
        //  print(result); // Output: 42
    number.minus = function(amount = 1)
            return self - locals.amount
    end function

        

        //  **Description:**
        //  Multiply 2 from the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to multiply by.
        //  @return {number} - The result of the multiplication.
        //  @example newNumber = 21
        //  @example 
        //  @example result = newNumber.multiply
        //  @example        
        //  print(result); // Outputs: 42
        //  @example result2 = newNumber.multiply(3)
        //  @example        
        //  print(result2); // Outputs: 63      
    number.multiply = function(amount = 2)
            return self * locals.amount
    end function



    //@name multiply
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".multiply" as multiply
        //  * NumberObject -> multiply : number
        //  * multiply -> NumberObject : (number * 2)
        //  * NumberObject -> multiply : number(6)
        //  * multiply -> NumberObject : (number * 6)        
        //  * footer
        //  * number.multiply
        //  * endfooter         
        //  * @enduml     

//  **Description:**
    //  Add 1 to the number or optional amount
    //  @description     
    //  @param {number} [amount] - The amount to add.
    //  @return {number} - The result of the addition.
    //  @example newNumber = 40
    //  @example 
    //  @example result = newNumber.plus(2);
    //  @example
    //  print(result); // Outputs: 42
number.plus = function(amount = 1)
        return self + locals.amount
end function
    //  * @startuml
    //  * entity NumberObject
    //  * control ".plus" as plus
    //  * NumberObject -> plus : number
    //  * plus -> NumberObject : (number + 1)
    //  * NumberObject -> plus : number(7)
    //  * plus -> NumberObject : (number + 7)        
    //  * footer
    //  * number.plus
    //  * endfooter         
    //  * @enduml            


        //  **Description:**
        //  Generate a random number from 0 to number, or from optional minimum to number
        //  @param {number} [min]
        //  @return {number} - The result of the subtraction.
        //  @example myNumber = 100;
        //  @example 
        //  @example result = myNumber.random_from(50);
        //  @example
        //  print(result); // Output: A random number between 50 and 100
    number.random_from = function(min = 0)
            locals.max = self
            return floor((rnd * (locals.max - locals.min + 1)) + locals.min)  
    end function
    //@name random_from
        //  * @startuml
        //  * entity NumberObject
        //  * control ".random_from" as random_from
        //  *   NumberObject -> random_from : number
        //  *   random_from -> NumberObject : [random number in range]     
        //  * footer
        //  *   number.random_from([opt:min])
        //  * endfooter         
        //  * @enduml         