gate = function(testObject, objectType = "null", error_string = "")
    if locals.objectType == typeof(locals.testObject) then return typeof(locals.testObject)
    if not locals.objectType == typeof(locals.testObject) then return locals.error_string
	return null
end function

string.color = function(color="red")
	if globals.gate(locals.color, "string", self) -- null then return "<color=" + locals.color + "></color>"
end function

is_null = function(testObject)
    if locals.testObject == null then
        return true
    else
        return false
    end if
end function

// **Description:**
// Checks if object is null; if null, print / return / exit options
// @param {any} testObj - The name of the library to load.
// @param {string} [failType] - The name of the library to load.
// @param {string} [failStr] - The name of the library to load.
// @return {true | false}
// @example is_null(testObj, "r")  //If not is_null(testObj) return false else true
// @example is_null(testObj, "p-r", "error: testObj is null")  //If not is_null(testObj) print error message and return false else true
// @example is_null(testObj, "e")  //If is_null(testObj) //exits program if testObj is null
// @example is_null(testObj, "e", "Critical Error.  Terminating Program")  //If is_null(testObj) //exits program if testObj is null with error message
	is_null = function(testObj, failType = "r", failStr = "")
		failOptions = split("failType", "-")
		locals.failPrint = false
		locals.failReturn = false
		locals.failExit = false
			for option in failOptions
				if option == "p" then locals.failPrint true
				if option == "r" then locals.failReturn true
				if option == "e" then locals.failExit true
			end for
			if testObj == null then
				if failType == "p" then
					print failString
				end if		
				if failType == "r" then
					return true
				end if		
				if failType == "e" then
					exit failString		
				end if		
				if failType == "r" then
					return false
				else
					return null
				end if
			else
				return false
			end if
	end function

// **Description:**
// Checks Types and specifies on-fail action
// @param {any} Object - The name of the library to load.
// @param {string} ObjectType - The type expected
// @param {string} [failType] - The action to take on type check fail
// @param {string} [ObjectType] - The string to return on fail action
// @return {true | false}
// @example is_type(myObject, "cryptoLib")  //If not typeof(cryptoLib) return false else true
// @example is_type(myObject, "metaxploitLib", "exit") //exit the program on failure to match
// @example is_type(myObject, "aptclientLib", "exit", "Unable to to load aptclientLib.so") //exit with error message
// @example is_type(myObject, "SystemObject", "print") //print result as string
	is_type = function(Object, ObjectType, failType = "return", failStr = "")
		if failType == "return" then
			if not typeof(Object) == ObjectType then return false
			return true
		end if
		if failType == "exit" then
			if not typeof(Object) == ObjectType then return failStr
			return true
		end if
		if failType == "print" then
			if not typeof(Object) == ObjectType then print "false"; return
		end if	
	end function