find_exploitable_addresses = function(libLocation, metaxLocation = "/lib/metaxploit.so", lineNumber = null)
	error_message = ""
	if is_type(locals.libLocation, "string") == false then error_message = "<color=red>Type Mismatch <u>find_exploitable_addresses</u> param[0]: Got " + typeof(libLocation) + ", expecting string</color>"
	if is_type(locals.metaxLocation, "string") == false then error_message "Type Mismatch find_exploitable_addresses param[1]: Got " + typeof(metaxLocation) + ", expecting string"
	if is_type(get_shell.host_computer.File(metaxLocation), "file") == false then error_message = "Unable to load lib file at " + metaxLocation
	if error_message.len > 0 then 
		error_message = error_message + "<color=red> on line " + lineNumber + "</color>"
		return error_message
	end if
    locals.metax = load_lib("metaxploit.so", "/lib", "MetaxploitLib")
        locals.metaLib = locals.metax.load(locals.libLocation)
		locals.libScanResult = locals.metax.scan(locals.metaLib)
        return locals.libScanResult
end function

fetch_exploit_requirements = function(addressList, libLocation)
    locals.metax = load_lib("metaxploit.so", "/lib", "MetaxploitLib")
    locals.metaLib = locals.metax.load(libLocation)
    locals.allExploitData = []
    for address in addressList
        locals.scanResults = locals.metax.scan_address(locals.metaLib, address)
        locals.unsafeCheckLists = (unsafe_check_list(locals.scanResults)).trim
        for unsafeCheck in locals.unsafeCheckLists
                locals.exploits = {"address": address, "variable": locals.unsafeCheck.extract, "cra": false, "cga": false, "cua": false, "rur": 0, "rpf": 0}
                if not locals.unsafeCheck.indexOf("Checking root active") then
                    locals.exploits.cra = false
                else
                    locals.exploits.cra = true
                end if
                if not locals.unsafeCheck.indexOf("Checking an active user") then
                    locals.exploits.cua = false
                else
                    locals.exploits.cua = true
                end if
                if not locals.unsafeCheck.indexOf("Checking guest active") then
                    locals.exploits.cga = false
                else
                    locals.exploits.cga = true
                end if
					unsafeCheckItems = split(locals.unsafeCheck, char(10))
					for unsafeItem in unsafeCheckItems
						if not locals.unsafeItem.indexOf("to ", ".") == null then
							if not locals.unsafeItem.indexOf("registered users") == null then
			                    locals.exploits.rur = to_int((unsafeItem.extract("to ", ".")).remove_char_last)
							end if
							if not locals.unsafeItem.indexOf("port forwarding") == null then
								portForwards = unsafeItem.remove(" port forwarding configured from router to the target computer.")
			                    locals.exploits.rpf = to_int(((unsafeItem.remove(" port forwarding configured from router to the target computer.")).remove("* ")))
							end if						
						end if
					end for
                locals.allExploitData.push(locals.exploits)
            end for
    end for
    return locals.allExploitData
end function

// **Description:**
// Appends Data to a file (creates new if does not exist)
// 
// @param {string} savePath - The name of the library to load.
// @param {string} saveFile - The directory where the library is located.
// @return {void}
// @example textToAdd = "New Line of Text to Add to File" + char(10) + "second line to add"
// @example
// append_file("/home/user/Database", "databasefile.db", textToAdd)
	file_append = function(savePath, saveFile, newText)
		//********************************************
		fileContent = ""
		fileLocation = savePath + "/" + saveFile
		//********************************************	
		hostComputer = get_shell.host_computer
		fileObj = hostComputer.File(fileLocation)
		if not fileObj then
			hostComputer.touch(savePath, saveFile)
			fileObj = hostComputer.File(fileLocation)
		end if
		//********************************************
		//********************************************		
		if fileObj.has_permission("r") then
			if fileObj.has_permission("w") then
				fileContent = fileObj.get_content
				if fileContent == null then
					fileObj.set_content(newText)
				else
					fileObj.set_content(fileContent + newText)
				end if
			else
			print("Permission Error Saving Data to: " + saveFile + " [No Write Permission]")
			end if
		else
			print("Permission Error Saving Data to: " + saveFile + " [No Read Permission]")
		end if
	end function

// **Description:**
// converts a boolean value into a text "true" or "false"
// @param {number} boolValue - The name of the library to load.
// @return {string} true / false
// @example trueOrFalse = boolToText(0)
// @example print(trueOrFalse) // Output: false
// @example
// @example trueOrFalse = boolToText(1)
// @example print(trueOrFalse) // Output: true
	bool_text = function(boolVal)
		if boolVal < 0 then return null
		if boolVal > 1 then return null
		if boolVal == 1 then return "true"
		if boolVal == 0 then return "false"
	return null
	end function

// @startuml
// entity calc_ack {
//   -number [signalStrength]
// }
// calc_ack : calc_ack(signalStrength)
// @enduml

// **Description:**
// Caculates the recommended amount of ACKs to collect
// @param {number} signalStrength - The name of the library to load.
// @return {number | null} calculate_acks
// @example reqACK = calculate_acks(6)
// @example
// @example print(reqACK) // Output: 50000
	get_acks = function(signalStrength = 1)
		if not typeof(signalStrength) == "number" then return null
		if signalStrength <= 0 or signalStrength > 100 then return null
		return ceil(300000 / signalStrength)
	end function

//Collection whois information
	fetch_whois = function(routerPublicIPAddress)
		if not is_lan_ip(routerPublicIPAddress) == true then
			whoisInformation = {"domain":"", "admin":"", "email":"", "phone":"", "network":""}
			what = split(whois(routerPublicIPAddress), "\n")
			whoisInfo = new whoisInformation
			whoisInfo.domain = split(what[0], ":")[1]
			whoisInfo.admin = split(what[1], ":")[1]
			whoisInfo.email = split(what[2], ":")[1]
			whoisInfo.phone = split(what[3], ":")[1]
			if what.len >= 5 then
				whoisInfo.network = split(what[4], ":")[0]
			else
				whoisInfo.network = "[ UNKNOWN ]"
			end if
		end if
		return whoisInfo
	end function

	file_delete = function(filePath, fileName)
		locals.hostComputer = get_shell.host_computer
		locals.fileLocation = filePath + "/" + fileName
		locals.fileObj = locals.hostComputer.File(locals.fileLocation)
		if locals.fileObj.has_permission("w") then
			locals.hostComputer.File.delete
		end if
	end function
		
	file_exists = function(filePath, fileName)
		locals.hostComputer = get_shell.host_computer
		locals.fileLocation = filePath + "/" + fileName
		locals.fileObj = locals.hostComputer.File(locals.fileLocation)
		if not locals.fileObj then
			return false
		else
			return true
		end if		
	end function

	file_new = function(filePath, fileName)
		locals.hostComputer = get_shell.host_computer
		locals.fileLocation = filePath + "/" + fileName
		locals.fileObj = locals.hostComputer.File(locals.fileLocation)
		if not locals.fileObj then
			locals.hostComputer.touch(filePath, fileName)
			locals.fileObj = locals.hostComputer.File(locals.fileLocation)
		end if
		if locals.fileObj then
			return true
		else
			return false
		end if
	end function

// @name force_params
// @startuml
// title Force Paramaters
// 
// class MyProgram {
//   + myprogram(ipAddress: string, port: int) : list<string>
// }
// 
// note right of MyProgram::myprogram
//   usage = "myprogram [ipAddress] [port]"
//   numReqParams = 2
// end note
//  @enduml

// **Description:**
// Specifies Usage Information and number of required paramters.
// 
// @param {string} usage - The name of the library to load.
// @param {number} minReqParams - The directory where the library is located.
// @return {void}
// @example
// force_params("myApp [ipAddress] [port#]", 2)
	force_params = function(usage, minReqParams)
		if params.len < 1 then exit usage
		if params[0] == "-h" or params[0] == "--help" then exit usage
		if params.len < minReqParams then exit usage
	end function

// **Description:**
// generates a random ip address
// @return {string} ipAddress {xxx.xxx.xxx.xxx}
// @example ipAddress = get_random_ip
// @example print(ipAddress) // Output: ###.###.###.###
	get_random_ip = function()
	locals.generateRandomOctet = function()
    	binaryString = ""
	    for i in range(8, 1)
	        // Convert the random float to a binary digit using a threshold:
	        if rnd() >= 0.5 then
	            binaryString = binaryString + "1"
	        else
	            binaryString = binaryString + "0"
	        end if
	    end for
	    // Now binaryString is exactly 8 characters of "0" and "1"
	    // You can then perform a proper conversion. For example:
	    return (0 + to_int(binaryString[0])) * 128 +
	           (0 + to_int(binaryString[1])) * 64 +
	           (0 + to_int(binaryString[2])) * 32 +
	           (0 + to_int(binaryString[3])) * 16 +
	           (0 + to_int(binaryString[4])) * 8 +
    	       (0 + to_int(binaryString[5])) * 4 +
        	   (0 + to_int(binaryString[6])) * 2 +
	           (0 + to_int(binaryString[7]))
	end function
    ipString = ""
    for i in range(4, 1)
        octet = locals.generateRandomOctet()
        // Only append a dot if there is already an octet in ipString.
        if ipString != "" then
            ipString = ipString + "."
        end if
        ipString = ipString + str(octet)
    end for
    return ipString
	end function

// **Description:**
// Checks if object is null; if null, print / return / exit options
// @param {any} testObj - The name of the library to load.
// @param {string} [failType] - The name of the library to load.
// @param {string} [failStr] - The name of the library to load.
// @return {true | false}
// @example is_null(testObj, "r")  //If not is_null(testObj) return false else true
// @example is_null(testObj, "p-r", "error: testObj is null")  //If not is_null(testObj) print error message and return false else true
// @example is_null(testObj, "e")  //If is_null(testObj) //exits program if testObj is null
// @example is_null(testObj, "e", "Critical Error.  Terminating Program")  //If is_null(testObj) //exits program if testObj is null with error message
	is_null = function (testObj, failType = "r", failStr = "")
		failOptions = split("failType", "-")
		locals.failPrint = false
		locals.failReturn = false
		locals.failExit = false
			for option in failOptions
				if option == "p" then locals.failPrint true
				if option == "r" then locals.failReturn true
				if option == "e" then locals.failExit true
			end for
			if testObj == null then
				if failType == "p" then
					print failString
				end if		
				if failType == "r" then
					return true
				end if		
				if failType == "e" then
					exit failString		
				end if		
				if failType == "r" then
					return false
				else
					return null
				end if
			else
				return false
			end if
	end function

// **Description:**
// Checks Types and specifies on-fail action
// @param {any} Object - The name of the library to load.
// @param {string} ObjectType - The type expected
// @param {string} [failType] - The action to take on type check fail
// @param {string} [ObjectType] - The string to return on fail action
// @return {true | false}
// @example is_type(myObject, "cryptoLib")  //If not typeof(cryptoLib) return false else true
// @example is_type(myObject, "metaxploitLib", "exit") //exit the program on failure to match
// @example is_type(myObject, "aptclientLib", "exit", "Unable to to load aptclientLib.so") //exit with error message
// @example is_type(myObject, "SystemObject", "print") //print result as string
	is_type = function(Object, ObjectType, failType = "return", failStr = "")
		if failType == "return" then
			if not typeof(Object) == ObjectType then return false
			return true
		end if
		if failType == "exit" then
			if not typeof(Object) == ObjectType then return failStr
			return true
		end if
		if failType == "print" then
			if not typeof(Object) == ObjectType then print "false"; return
		end if	
	end function

// @startuml
// entity load_lib {
//   -string [libName = "metaxploit.so"]
//   -string [libDir = "/lib"]
//   -string [libType = ""]
// }
// load_lib : include_lib(libName, libDir, libType)
// load_lib : typeof(lib): string | null
// @enduml

// * **Description:**
// Loads a library from the lib directory, optional specified directory, optionally verify type

// * **Description:**
// Loads a library from the lib directory, optional specified directory, optionally verify type
// 
// @link [https://documentation.greyscript.org/#GENERAL_TYPEOF] {default type list}
// @param {string} libName - The name of the library to load.
// @param {string} [libDir] - The directory where the library is located.
// @param {string} [libType] - The expected type of the library.
// 
//  * @return {objectLib | null}
// @example lib = load_lib                                              //Load metaxploit.so from /lib directory
// @example lib = load_lib("metaxploit.so")                             //Load a library without specifying type
// @example lib = load_lib("customLib.so", "/altLib")                   //Load a library from specified directory
// @example lib = load_lib("crypto.so", "/lib", "cryptoLib")            //Load a library with a specified type, return null on type mismatch
// @return {objectLib | null}
load_lib = function(libName = "metaxploit.so", libDir = "/lib", libType = "")
    libLocation = libDir + "/" + libName
    if libName == "" then
        return get_shell.host_computer.File("/")
    end if
    yield; lib = include_lib(libLocation)
        if not typeof(lib) == null then
            if libType == "" then
                return lib
            else if typeof(lib) == libType then
                return lib
			else
				return null
            end if
        else
            return null
        end if
end function

// **Description**
// Returns Network devices in a list
// @param {string} [user]
// @param {string} [pass]
// @return {list<string>}
	network_device_list = function(user = "", pass = "")
		networkDevices = split(get_shell(user,pass).host_computer.network_devices, char(10))
		networkDeviceList = []
		for device in networkDevices
			if device then networkDeviceList.push(split(device, " "))
		end for
		return networkDeviceList
	end function

// **Description:**
// Gets name of program *{self}*
// @return {void}
// @example
// programName = app_name
	program_name = function()
		splitVal = program_path.split("/")
		splitVal.reverse
		return trim(splitVal[0])
	end function

// **Description:**
//	Split Unsafe Check Results into Individual Exploit Results and return list of UnsafeCheck strings
// @param {string} scanResults - The name of the library to load.
// @return {list <string>}
	unsafe_check_list = function(scanResults)
		scanResults = scanResults.remove("decompiling source..." + char(10) + "searching unsecure values..." + char(10))
		unsafeCheckList = scanResults.split(char(10)*2)
		return unsafeCheckList
	end function


