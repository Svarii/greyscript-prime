//GreyScript Prime version 0.1a by Svarii
    //@name color
        //  * @startuml        
        //  *   entity StringObject
        //  *   control ".color" as color
        //  *       StringObject -> color : .color("blue")
        //  *       color -> StringObject : "<color=blue>string</color>"
        //  *   footer
        //  *       string.color()
        //  *   endfooter        
        //  * @enduml               
        // ANCHOR string.color 

        //  **Description:**
        //  Color values maybe be #**FFFFFF** or **color** format
        //  
        //  @param {string} colorValue - The color to apply.
        //  @return {string} - The colorized text.
        //  @example newString = "Hello"   
        //  @example 
        //  @example result = newString.color("blue");
        //  @example     
        //  print(result); // Outputs: <color=blue>Hello</color>
        //  @example        
        //  @example result = newString.color("#FFFFFF");
        //  @example   
        //  print(result); // Outputs: <color=#FFFFFF>Hello</color>           
    string.color = function(colorValue = "red")
        if not typeof(colorValue) == "string" then return null
        return "<color=" + colorValue + ">" + self + "</color>"
    end function

    //@name bold
        //  * @startuml
        //  * entity StringObject
        //  * control ".bold" as bold
        //  *   StringObject -> bold : string
        //  *   bold -> StringObject : //<b>//string//</b>//
        //  * footer
        //  *   string.bold
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.bold

        //  **Description:**  
        //  Applies bold to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.bold
        //  @example 
        //  print(result); // Outputs: <b>Hello</b>       
    string.bold = function()
        return "<b>" + self + "</b>"
    end function

    //@name italic
        //  * @startuml
        //  * entity StringObject
        //  * control ".italic" as italic
        //  *   StringObject -> italic : string
        //  *   italic -> StringObject : //<i>//string//</i>//
        //  * footer
        //  *   string.italic
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.italic

	    //  **Description:**
        //  Applies italic to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.italic        
        //  @example        
        //  print(result); // Outputs: <i>Hello</i>         
    string.italic = function()
        return "<i>" + self + "</i>"
    end function 

    //@name underline 
        //  * @startuml
        //  * entity StringObject
        //  * control ".underline" as underline
        //  *   StringObject -> underline : string
        //  *   underline -> StringObject : //<u>//string//</u>//
        //  * footer
        //  *   string.underline
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.underline

        //  **Description:**
        //  Applies underline to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.underline
        //  @example        
        //  print(result); // Outputs: <u>Hello</u>
    string.underline = function()
        return "<u>" + self + "</u>"
    end function

    //@name strike
            //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".strike" as strike
        //  * StringObject -> strike : string
        //  * strike -> StringObject : //<s>//string//</s>//
        //  * footer
        //  * string.strike
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.strike

        //  **Description:**
        //  Applies strikethrough to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.strike
        //  @example 
        //  print(result); // Outputs: <s>Hello</s>
    string.strike = function()
        return "<s>" + self + "</s>"
    end function

    //@name mark
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".mark" as mark
        //  * StringObject -> mark : string
        //  * mark -> StringObject : //<mark>//string//</mark>//
        //  * footer
        //  * string.mark
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.mark

        //  **Description:**
        //  Applies mark to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.mark
        //  @example
        //  print(result); // Outputs: <mark>Hello</mark>
    string.mark = function()
        return "<mark>" + self + "</mark>"
    end function

    //@name sub
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".sub" as sub
        //  * StringObject -> sub : string
        //  * sub -> StringObject : //<sub>//string//</sub>//
        //  * footer
        //  * string.sub
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.sub   

        //  **Description:**
        //  Applies subscript to the given text.
        //   
        //  @return {string}
        //  @example newString = "Hello"     
        //  @example result = newString.sub
        //  @example        
        //  print(result); // Outputs: <sub>Hello</sub>
    string.sub = function()
        return "<sub>" + self + "</sub>"    
    end function

    //@name sup
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".sup" as sup
        //  * StringObject -> sup : string
        //  * sup -> StringObject : //<sup>//string//</sup>//
        //  * footer
        //  * string.sup
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.sup  

        //  **Description:**
        //  Applies superscript to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.sup       
        //  @example
        //  print(result); // Outputs: <sup>Hello</sup>
    string.sup = function()
        return "<sup>" + self + "</sup>"    
    end function
print 
    //@name remove_char_last
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_char_last" as remove_char_last
        //  * StringObject -> remove_char_last : string
        //  * remove_char_last -> StringObject : strin
        //  * footer
        //  * string.remove_char_last
        //  * endfooter 
        //  * @enduml        
        // ANCHOR string.remove_char_last  

        //  **Description:**
        //  Remove the last character of the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example             
        //  @example result = newString.remove_char_last
        //  @example          
        //  print(result); // Outputs: Hell
   string.remove_char_last = function()
        return slice(self, 0, (self.len - 1))
    end function

    //@name remove_char_first
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_char_first" as remove_char_first
        //  * StringObject -> remove_char_first : string
        //  * remove_char_first -> StringObject : tring
        //  * footer
        //  * string.remove_char_first
        //  * endfooter 
        //  * @enduml        
        // ANCHOR string.remove_char_first

        //  **Description:**
        //  Remove the first character of the given text.
        //  @return {string}
        //  @example newString = "Hello"
        //  @example    
        //  @example result = newString.remove_char_first
        //  @example          
        //  print(result); // Outputs: ello
    string.remove_char_first = function()
        return slice(self, 1, (self.len))
    end function

    //@name remove_bold
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_bold" as remove_bold
        //  *   StringObject -> remove_bold : //<b>//string//</b>//
        //  *   remove_bold -> StringObject : string
        //  *   StringObject -> remove_bold : //<b>//string//</b>// //<b>//string//</b>//
        //  *   remove_bold -> StringObject : string string
        //  * footer
        //  *   string.remove_bold
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.remove_bold

        //  **Description:**
        //  Remove the bold tag of the given text.
        //  @return {string}
        //  @example newString = "<b>Hello</b>"
        //  @example        
        //  @example result = newString.remove_bold
        //  @example
        //  print(result); // Outputs: Hello 
    string.remove_bold = function()
        newString = self.remove("<b>")
        return newString.remove("</b>")
    end function

    //@name remove_italic 
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_italic" as remove_italic
        //  *   StringObject -> remove_italic : //<i>//string//</i>//
        //  *   remove_italic -> StringObject : string
        //  *   StringObject -> remove_italic : //<i>//string//</i>// //<i>//string//</i>//
        //  *   remove_italic -> StringObject : string string
        //  * footer
        //  *   string.remove_italic
        //  * endfooter           
        //  * @enduml            
        // ANCHOR string.remove_italic   

        //  **Description:**
        //  Remove the italic tag of the given text.
        //  @example 
        //  @return {string}
        //  @example newString = "<i>Hello</i>"  
        //  @example result = newString.remove_italic
        //  @example        
        //  print(result); // Outputs: Hello
    string.remove_italic = function()
        newString = self.remove("<i>")
        return newString.remove("</i>")
    end function

    //@name remove_underline
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_underline" as remove_underline
        //  *   StringObject -> remove_underline : //<u>//string//</u>//
        //  *   remove_underline -> StringObject : string
        //  *   StringObject -> remove_underline : //<u>//string//</u>// //<u>//string//</u>//
        //  *   remove_underline -> StringObject : string string 
        //  * footer
        //  *   string.remove_underline
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.remove_underline

        //  **Description:**
        //  Remove the underline tag of the given text.
        //  
        //  @return {string}
        //  @example newString = "<u>Hello</u>"
        //  @example        
        //  @example result = newString.remove_underline
        //  @example        
        //  print(result); // Outputs: Hello
    string.remove_underline = function()
        newString = self.remove("<u>")
        return newString.remove("</u>")
    end function

    //@name remove_strike    
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_strike" as remove_strike
        //  *   StringObject -> remove_strike : //<s>//string//</s>//
        //  *   remove_strike -> StringObject : string
        //  *   StringObject -> remove_strike : //<s>//string//</s>// //<s>//string//</s>//
        //  *   remove_strike -> StringObject : string string
        //  * footer
        //  *   string.remove_strike
        //  * endfooter             
        //  * @enduml        
        // ANCHOR string.remove_strike  

        //  **Description:**
        //  Remove the strikethrough tag of the given text.
        //  
        //  @return {string}
        //  @example newString = "<s>Hello</s>"
        //  @example 
        //  @example result = newString.remove_strike
        //  @example         
        //  print(result); // Outputs: Hello
    string.remove_strike = function()
        newString = self.remove("<s>")
        return newString.remove("</s>")
    end function

    //@name remove_mark    
        //  * **Description:**
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_mark" as remove_mark
        //  *   StringObject -> remove_mark : //<mark>//string//</mark>//
        //  *   remove_mark -> StringObject : string
        //  *   StringObject -> remove_mark : //<mark>//string//</mark>// //<mark>//string//</mark>//
        //  *   remove_mark -> StringObject : string string   
        //  * footer
        //  *   string.remove_mark
        //  * endfooter               
        //  * @enduml        
        // ANCHOR string.remove_mark  

        //  **Description:**
        //  Remove the mark tag of the given text.
        //  @return {string}
        //  @example newString = "<mark>Hello</mark>"
        //  @example 
        //  @example result = newString.remove_mark
        //  @example
        //  print(result); // Outputs: Hello
    string.remove_mark = function()
        newString = self.remove("<mark>")
        return newString.remove("</mark>")
    end function

    //@name remove_sub    
        //  * **Description:**
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_sub" as remove_sub
        //  *   StringObject -> remove_sub : //<sub>//string//</sub>//
        //  *   header string.remove_sub
        //  *   remove_sub -> StringObject : string
        //  *   StringObject -> remove_sub : //<sub>//string//</sub>// //<sub>//string//</sub>//
        //  *   remove_sub -> StringObject : string string  
        //  * footer
        //  *   string.remove_sub
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.remove_sub  

        //  **Description:**
        //  Remove the sub tag of the given text.
        //  @return {string}
        //  @example newString = "<sub>Hello</sub>"     
        //  @example 
        //  @example result = newString.remove_sub
        //  @example                
        //  print(result); // Outputs: Hello
    string.remove_sub = function()
        newString = self.remove("<sub>")
        return newString.remove("</sub>")
    end function

    //@name remove_sup
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_sup" as remove_sup
        //  *   StringObject -> remove_sup : //<sup>//string//</sup>//
        //  *   header string.remove_sup
        //  *   remove_sup -> StringObject : string
        //  *   StringObject -> remove_sup : //<sup>//string//</sup>// //<sup>//string//</sup>//
        //  *   remove_sup -> StringObject : string string  
        //  * footer
        //  *   string.remove_sup
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.remove_sup   

        //  **Description:**
        //  Remove the sup tag of the given text.
        //  @return {string}
        //  @example newString = "<sup>Hello</sup>"
        //  @example 
        //  @example result = newString.remove_sup        
        //  @example
        //  print(result); // Outputs: Hello
    string.remove_sup = function()
        newString = self.remove("<sup>")
        return newString.remove("</sup>")
    end function

    //@name extract_between
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".extract_between" as extract_between
        //  *   StringObject -> extract_between : //<b>//string//</b>//
        //  *   header string.extract_between("//<b>//", "</b>")
        //  *   extract_between -> StringObject : string
        //  * footer
        //  *   string.extract_between(start, end)
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.extract_between

        //  **Description:**
        //  Extract the text between the first found indexies of the given start and end strings        
        //  @description **Default:** Extract the text between the first found bold tag if no paramaters provided
        //  @param {string} [tagStart = "<b>""]
        //  @param {string} [tagEnd = "</b>"]
        //  @return {string or null}
        //  @example newString = "<b>0x53C737</b>"
        //  @example 
        //  @example result = newString.extract_between("<b>", "</b>")
        //  @example           
        //  print(result); // Outputs: 0x53C737   
    string.extract_between = function(tagStart = "<b>", tagEnd = "</b>")
        startIndex = self.indexOf(tagStart) + (tagStart.len)
        endIndex = self.indexOf(tagEnd) - (tagEnd.len - tagStart.len) + 1
        return slice(self, startIndex, endIndex)
    end function
 
    //@name format
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".format" as format
        //  * StringObject -> format : string
        //  * header string.format(["fox", "dog"])
        //  * format -> StringObject : string formatted
        //  * footer
        //  * string.format([argsList])
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.format

        //  **Description:**
        //  Allows for string interpolation
        //  @contributer dynobytes
        //  @param {list<string>} args - List of values for delim
        //  @param {string} [delim="%s"]
        //  @return {string}
        //  @example variableString = "The quick brown %s jumps over the lazy %s"
        //  @example animalsList = ["fox", "dog"] 
        //  @example      
        //  @example sentence = variableString.format(animalsList)
        //  @example
        //  print(sentence); // Outputs: The quick brown fox jumps over the lazy dog
string.format = function(args, delim="%s")
    locals.splitStr = self.split(delim);
    locals.recompStr = ""
    for i in range(0, args.len()-1)
	    locals.recompStr = locals.recompStr + locals.splitStr[i] + args[i]  
    end for
        locals.recompStr = locals.recompStr + locals.splitStr[locals.splitStr.len()-1]
    return locals.recompStr
end function
//Extended number object methods
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".plus" as plus
        //  * NumberObject -> plus : number
        //  * plus -> NumberObject : (number + 1)
        //  * NumberObject -> plus : number(7)
        //  * plus -> NumberObject : (number + 7)        
        //  * footer
        //  * number.plus
        //  * endfooter         
        //  * @enduml           
        // ANCHOR number.plus

        //  **Description:**
        //  Add 1 to the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to add.
        //  @return {number | null} - The result of the addition.
        //  @example newNumber = 40
        //  @example 
        //  @example result = newNumber.plus(2);
        //  @example
        //  print(result); // Outputs: 42
    number.plus = function(amount = 1)
        if not typeof(amount) == "number" then return null
            return self + amount
    end function
    //@name minus
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".minus" as minus
        //  * NumberObject -> minus : number
        //  * minus -> NumberObject : (number - 1)
        //  * NumberObject -> minus : number(7)
        //  * minus -> NumberObject : (number - 7)        
        //  * footer
        //  * number.minus
        //  * endfooter         
        //  * @enduml         
        // ANCHOR number.minus  

        //  **Description:**
        //  Subtract 1 from the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to add.
        //  @return {number | null} - The result of the subtraction.
        //  @example newNumber = 44
        //  @example 
        //  @example result = newNumber.minus(2);
        //  @example        
        //  print(result); // Outputs: 42
    number.minus = function(amount = 1)
        if not typeof(amount) == "number" then return null
            return self - amount
    end function

    //@name diff
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".diff" as diff
        //  * NumberObject -> diff : <i>[2]</i>number(44)
        //  * diff -> NumberObject : number[42]     
        //  * footer
        //  * number.diff
        //  * endfooter         
        //  * @enduml   
        // ANCHOR number.diff  

        //  **Description:**
        //  Return difference to number
        //  @param {number} amount
        //  @return {number | null} - The result of the subtraction.
        //  @example newNumber = 44
        //  @example newNumber2 = 2   
        //  @example       
        //  @example result = newNumber.diff(newNumber2)
        //  @example
        //  print(result); // Outputs: 42          
    number.diff = function(distanceTo = 0)
        if not typeof(distanceTo) == "number" then return null
            return abs(self - distanceTo)
    end function

    //@name greater_than   
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".greater_than" as greater_than
        //  * NumberObject -> greater_than : number
        //  * greater_than -> NumberObject : [true / false]     
        //  * footer
        //  * number.greater_than
        //  * endfooter         
        //  * @enduml 
        // ANCHOR number.greater_than    

        //  **Description:**
        //  Check if number is greater than provided number
        //  @param {number} isGreater
        //  @return {bool number | null} - The result of the subtraction.
        //  @example myNumber = 42;
        //  @example myNumber2 = 100;
        //  @example 
        //  @example result = newNumber.greater_than(myNumber2);
        //  @example        
        //  print(result); // Outputs: 0
    number.greater_than = function(isGreater)
        if not typeof(isGreater) == "number" then return null
            if isGreater > self then return true
            return false
    end function

    //@name lesser_than   
        //  * @startuml
        //  * entity NumberObject
        //  * control ".lesser_than" as lesser_than
        //  *   NumberObject -> lesser_than : number
        //  *   lesser_than -> NumberObject : [true / false]     
        //  * footer
        //  *   number.lesser_than
        //  * endfooter         
        //  * @enduml 
        // ANCHOR number.lesser_than  
        
        //  **Description:**
        //  Check if number is lesser than provided number   
        //  @param {number} amount
        //  @return {number [0 or 1] | null} - The result of the subtraction.
        //  @example myNumber = 42;
        //  @example myNumber2 = 100;
        //  @example 
        //  @example result = newNumber.lesser_than(myNumber2);
        //  @example
        //  print(result); // Outputs: 1
    number.lesser_than = function(isLesser)
        if not typeof(isLesser) == "number" then return null
            if isLesser < self then return true
            return false
    end function

    //@name random_from
        //  * @startuml
        //  * entity NumberObject
        //  * control ".random_from" as random_from
        //  *   NumberObject -> random_from : number
        //  *   random_from -> NumberObject : [random number in range]     
        //  * footer
        //  *   number.random_from([opt:min])
        //  * endfooter         
        //  * @enduml        
        // ANCHOR number.random_from

        //  **Description:**
        //  Generate a random number from 0 to number or optional minimum
        //  @param {number} [min]
        //  @return {number | null} - The result of the subtraction.
        //  @example myNumber = 100;
        //  @example 
        //  @example result = myNumber.random_from(50);
        //  @example
        //  print(result); // Outputs: {rnd:50-100}
    number.random_from = function(min = 0)
        if not typeof(min) == "number" then return null
            max = self
            return floor((rnd * (max - min + 1)) + min)  
    end function

//LIST FUNCTIONS
//.trim removes zero length list items at start and end


    //@name trim
        //  * @startuml
        //  * entity ListObject
        //  * control ".trim" as trim
        //  *   ListObject -> trim : list
        //  *   trim -> ListObject : list (no empties on ends)     
        //  * footer
        //  *   list.trim
        //  * endfooter         
        //  * @enduml        
        // ANCHOR list.trim

        //  **Description:**
        //  Trims a <list>
        //  @return {string} 
        //  @example myList = ["","","cat","dog",""];
        //  @example 
        //  @example result = myList.trim
        //  @example
        //  print(result); // Outputs: ["cat","dog"]
list.trim = function()
	while not self[self.len - 1].len > 0
        self.remove(self.len - 1)
    end while
	while not self[0].len > 0
        self.remove(0)
    end while
	return self
end function

    //@name print
        //  * @startuml
        //  * entity ListObject
        //  * interface ScreenOutput
        //  * control ".print" as print
        //  *   ListObject -> print : list
        //  *   print -> ScreenOutput : print()
        //  * footer
        //  *   list.print
        //  * endfooter         
        //  * @enduml        
        // ANCHOR list.print

        //  **Description:**
        //  Prints a list
        //  @return {void} 
        //  @example myList = ["cat","dog"]
        //  @example myList.print
        //  @example
        //  @example // Outputs:
        //  @example      cat
        //  @example      dog
list.print = function(seperator = char(10))
    printString = split(self, seperator)
    print printString
end function