// Applies align tag to the string
    // @description **Description:**
    // @description Modifies a text string to wrap it in the align tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [alignment]
    // @description - `alignment` Accepted values: `left`, `center`, `right`, `justified`, and `flush`
    // @param {boolean} [closeTag]
    // @description - `closeTag` Accepted values: `true` or `false`
    //
    // @description **Parameter Defaults:**
    // @description - `alignment`:`center`
    // @description - `closeTag`:`true`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` the string value embedded in (or preceded by) the `<align>` tag
    // @description ---
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    // @example newString = "Hello"
    // @example 
    // @example result = newString.align("center")
    // @example 
    // print result // Output: <align="center">Hello</align>
    // @example         
    // @example result = newString.align("center", false)
    // @example 
    // print result // Output: <align="center">Hello
    // @description ---        
    // @description **Links:**
    // @description [Text Mesh Pro: Rich Text Alignment](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextAlignment.html)
    // @description ---       
    // @description ***footnotes***   
    // @description Parameters are not checked for validity   
    // @description - `alignment` will not reject invalid values | **Return**: `string<withParseIssues>`
    // @description - `closeTag` will not reject invalid values | **Return**: `null`
    // @description
    // @description If all paramaters passed are invalid | **Return**: `null`
    // @description ---  
string.align = function(alignment = "center", closeTag = true)
    locals.newString = "<align=" + locals.alignment + ">" + self
    if locals.closeTag == true then locals.newString = locals.newString + "</align>"
    return locals.newString
end function        

// Applies alpha tag to the string
    // @description **Description:**
    // @description Modifies a text string and preced it with the alpha tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [hexOpacity]
    // @description - `hexOpacity` Accepted values: 2 digit HEX value preceded by #
    //
    // @description **Parameter Defaults:**
    // @description - `hexOpacity`:`#FF`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` the string value preceded by the `<alpha>` tag
    // @description ---
    //
    // @description **Links:**
    // @description [Text Mesh Pro: Rich Text Opacity](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextOpacity.html)
    // @description ---
    //    
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    // @description ***footnotes***   
    // @description Parameters are not checked for validity   
    // @description - `hexOpacity` will not reject invalid values | **Return**: `string<withParseIssues>`
    // @description - does not apply a closing tag and affects all text that follows
    // @description - will apply transparancy (default) #FF if no paramaters are passed
    // @description ---        
    //
    // @example newString = "Hello"
    // @example 
    // @example result = newString.alpha("#4C")
    // @example 
    // print(result); // Output: <alpha=#4C>Hello
    // @example 
    // @example result = newString.alpha
    // @example 
    // print(result); // Output: <alpha=#FF>Hello    
string.alpha = function(hexOpacity = "#FF")
    return "<alpha=" + locals.hexOpacity + ">" + self
end function

// Applies bold tag to the string
    // @description **Description:**
    // @description Modifies a text string and wraps within the bold tag
    // @description ---
    //
    // @description **Parameters:**
    // @description - None
    //
    // @description **Return:**
    // @return {string}
    // @description `string` the string value embedded in the `<b>` tag
    // @description ---
    //
    // @description **Links:**
    // @description [Text Mesh Pro: Rich Text Bold](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextBoldItalic.html)
    // @description ---
    //    
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---     
    //
    // @example newString = "Hello"
    // @example 
    // @example result = newString.bold
    // @example 
    // print(result); // Output: <b>Hello</b>          
    // @description --- 
string.bold = function()
    return "<b>" + self + "</b>"
end function  

// Applies color tag to the string
	// @description **Description:**
	// @description Modifies a text string by wraping it within the color tag
	// @description ---
	//
	// @description **Parameters:**
	// @param {string} colorValue
	// @description - `colorValue`
	//
	// @description **Return:**
	// @return {string}
	// @description `string` the string value embedded in the `<color>` tag
	// @description ---
	//
	// @description **Links:**
	// @description - [Text Mesh Pro: Rich Color Text](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextColor.html)	
	// @description - [HTML Color Names: Supported Name List](https://htmlcolorcodes.com/color-names/)
	// @description ---	
	//
	// @description **Author:** Svarii
	// @description **Version:** 0.0.1
	// @description ---
	//
	// @description ***footnotes***
	// @description Color names are case sensitive
	// @description ---
	//
	// @example newString = "Hello"   
	// @example 
	// @example result = newString.color("blue");
	// @example     
	// print(result); // Outputs: <color=blue>Hello</color>
	// @example        
	// @example result = newString.color("#FFFFFF");
	// @example   
	// print(result); // Outputs: <color=#FFFFFF>Hello</color>
	// @example        
	// @example result = newString.color("Aquamarine");
	// @example   
	// print(result); // Outputs: <color=#7FFFD4>Hello</color>        
string.color = function(colorValue)
	if not typeof(colorValue) == "string" then return self
	//*****************************************************
	// Red HEX Codes
	//*****************************************************	
	if colorValue == "IndianRed" then colorValue = "#CD5C5C"
	if colorValue == "LightCoral" then colorValue = "#F08080"
	if colorValue == "Salmon" then colorValue = "#FA8072"
	if colorValue == "DarkSalmon" then colorValue = "#E9967A"
	if colorValue == "LightSalmon" then colorValue = "#FFA07A"			
	if colorValue == "Crimson" then colorValue = "#DC143C"
	if colorValue == "Red" then colorValue = "#FF0000"
	if colorValue == "FireBrick" then colorValue = "#B22222"
	if colorValue == "DarkRed" then colorValue = "#8B0000"
	//*****************************************************
	// Pink HEX Codes
	//*****************************************************		
	if colorValue == "Pink" then colorValue = "#FFC0CB"
	if colorValue == "LightPink" then colorValue = "#FFB6C1"		
	if colorValue == "HotPink" then colorValue = "#FF69B4"		
	if colorValue == "DeepPink" then colorValue = "#FF1493"		
	if colorValue == "MediumVioletRed" then colorValue = "#C71585"				
	if colorValue == "PaleVioletRed" then colorValue = "#DB7093"				
	//*****************************************************
	// Orange HEX Codes
	//*****************************************************					
	if colorValue == "Coral" then colorValue = "#FF7F50"						
	if colorValue == "Tomato" then colorValue = "#FF6347"				
	if colorValue == "OrangeRed" then colorValue = "#FF4500"						
	if colorValue == "DarkOrange" then colorValue = "#FF8C00"				
	if colorValue == "Orange" then colorValue = "#FFA500"						
	//*****************************************************
	// Yellow HEX Codes
	//*****************************************************
	if colorValue == "Gold" then colorValue = "#FFD700"
	if colorValue == "Yellow" then colorValue = "#FFFF00"
	if colorValue == "LightYellow" then colorValue = "#FFFFE0"
	if colorValue == "LemonChiffon" then colorValue = "#FFFACD"
	if colorValue == "LightGoldenrodYellow" then colorValue = "#FAFAD2"        
	if colorValue == "PapayaWhip" then colorValue = "#FFEFD5"
	if colorValue == "Moccasin" then colorValue = "#FFE4B5"
	if colorValue == "PeachPuff" then colorValue = "#FFDAB9"
	if colorValue == "PaleGoldenrod" then colorValue = "#EEE8AA"
	if colorValue == "Khaki" then colorValue = "#F0E68C"                                					
	if colorValue == "DarkKhaki" then colorValue = "#BDB76B"                                					        
	//*****************************************************
	// Purple HEX Codes
	//*****************************************************
	if colorValue == "Lavender" then colorValue = "#E6E6FA"
	if colorValue == "Thistle" then colorValue = "#D8BFD8"
	if colorValue == "Plum" then colorValue = "#DDA0DD"
	if colorValue == "Violet" then colorValue = "#EE82EE"
	if colorValue == "Orchid" then colorValue = "#DA70D6"        
	if colorValue == "Fuchsia" then colorValue = "#FF00FF"
	if colorValue == "Magenta" then colorValue = "#FF00FF"
	if colorValue == "MediumOrchid" then colorValue = "#BA55D3"
	if colorValue == "MediumPurple" then colorValue = "#9370DB"
	if colorValue == "RebeccaPurple" then colorValue = "#663399"                                					
	if colorValue == "BlueViolet" then colorValue = "#8A2BE2"
	if colorValue == "DarkViolet" then colorValue = "#9400D3"
	if colorValue == "DarkOrchid" then colorValue = "#9932CC"
	if colorValue == "DarkMagenta" then colorValue = "#8B008B"
	if colorValue == "Purple" then colorValue = "#800080"
	if colorValue == "Indigo" then colorValue = "#4B0082"        
	if colorValue == "SlateBlue" then colorValue = "#6A5ACD"
	if colorValue == "DarkSlateBlue" then colorValue = "#483D8B"
	if colorValue == "MediumSlateBlue" then colorValue = "#7B68EE" 
	//*****************************************************
	// Green HEX Codes
	//*****************************************************
	if colorValue == "GreenYellow" then colorValue = "#ADFF2F"
	if colorValue == "Chartreuse" then colorValue = "#7FFF00"
	if colorValue == "LawnGreen" then colorValue = "#7CFC00"
	if colorValue == "Lime" then colorValue = "#00FF00"
	if colorValue == "LimeGreen" then colorValue = "#32CD32"        
	if colorValue == "PaleGreen" then colorValue = "#98FB98"
	if colorValue == "LightGreen" then colorValue = "#90EE90"
	if colorValue == "MediumSpringGreen" then colorValue = "#00FA9A"
	if colorValue == "SeaGreen" then colorValue = "#2E8B57"
	if colorValue == "ForestGreen" then colorValue = "#228B22"                                					
	if colorValue == "Green" then colorValue = "#008000"
	if colorValue == "DarkGreen" then colorValue = "#006400"
	if colorValue == "YellowGreen" then colorValue = "#9ACD32"
	if colorValue == "OliveDrab" then colorValue = "#6B8E23"
	if colorValue == "Olive" then colorValue = "#808000"
	if colorValue == "DarkOliveGreen" then colorValue = "#556B2F"        
	if colorValue == "MediumAquamarine" then colorValue = "#66CDAA"
	if colorValue == "DarkSeaGreen" then colorValue = "#8FBC8B"
	if colorValue == "LightSeaGreen" then colorValue = "#20B2AA" 
	if colorValue == "DarkCyan" then colorValue = "#008B8B"        
	if colorValue == "Teal" then colorValue = "#008080"
	//*****************************************************
	// Blue HEX Codes
	//*****************************************************	
	if colorValue == "Aqua" then colorValue = "#00FFFF"
	if colorValue == "Cyan" then colorValue = "#00FFFF"
	if colorValue == "LightCyan" then colorValue = "#E0FFFF"
	if colorValue == "PaleTurquoise" then colorValue = "#AFEEEE"
	if colorValue == "Aquamarine" then colorValue = "#7FFFD4"        
	if colorValue == "Turquoise" then colorValue = "#40E0D0"
	if colorValue == "MediumTurquoise" then colorValue = "#48D1CC"
	if colorValue == "DarkTurquoise" then colorValue = "#00CED1"
	if colorValue == "CadetBlue" then colorValue = "#5F9EA0"
	if colorValue == "SteelBlue" then colorValue = "#4682B4"                           					
	if colorValue == "LightSteelBlue" then colorValue = "#B0C4DE"
	if colorValue == "PowderBlue" then colorValue = "#B0E0E6"
	if colorValue == "LightBlue" then colorValue = "#ADD8E6"
	if colorValue == "SkyBlue" then colorValue = "#87CEEB"
	if colorValue == "LightSkyBlue" then colorValue = "#87CEFA"
	if colorValue == "DeepSkyBlue" then colorValue = "#00BFFF"        
	if colorValue == "DodgerBlue" then colorValue = "#1E90FF"
	if colorValue == "CornflowerBlue" then colorValue = "#6495ED"
	if colorValue == "MediumSlateBlue" then colorValue = "#7B68EE"
	if colorValue == "RoyalBlue" then colorValue = "#4169E1"
	if colorValue == "Blue" then colorValue = "#0000FF"
	if colorValue == "MediumBlue" then colorValue = "#0000CD"
	if colorValue == "DarkBlue" then colorValue = "#00008B"  
	if colorValue == "Navy" then colorValue = "#000080"
	if colorValue == "MidnightBlue" then colorValue = "#191970"                        
	//*****************************************************
	// Brown HEX Codes
	//*****************************************************	
	if colorValue == "Cornsilk" then colorValue = "#FFF8DC"
	if colorValue == "BlanchedAlmond" then colorValue = "#FFEBCD"
	if colorValue == "Bisque" then colorValue = "#FFE4C4"
	if colorValue == "NavajoWhite" then colorValue = "#FFDEAD"
	if colorValue == "Wheat" then colorValue = "#F5DEB3"        
	if colorValue == "BurlyWood" then colorValue = "#DEB887"
	if colorValue == "Tan" then colorValue = "#D2B48C"
	if colorValue == "RosyBrown" then colorValue = "#BC8F8F"
	if colorValue == "SandyBrown" then colorValue = "#F4A460"
	if colorValue == "Goldenrod" then colorValue = "#DAA520"                                					
	if colorValue == "DarkGoldenrod" then colorValue = "#B8860B"
	if colorValue == "Peru" then colorValue = "#CD853F"
	if colorValue == "Chocolate" then colorValue = "#D2691E"
	if colorValue == "SaddleBrown" then colorValue = "#8B4513"
	if colorValue == "Sienna" then colorValue = "#A0522D"
	if colorValue == "Brown" then colorValue = "#A52A2A"        
	if colorValue == "Maroon" then colorValue = "#800000"          			
	//*****************************************************
	// White HEX Codes
	//*****************************************************	
	if colorValue == "White" then colorValue = "#FFFFFF"
	if colorValue == "Snow" then colorValue = "#FFFAFA"
	if colorValue == "HoneyDew" then colorValue = "#F0FFF0"
	if colorValue == "MintCream" then colorValue = "#F5FFFA"
	if colorValue == "Azure" then colorValue = "#F0FFFF"        
	if colorValue == "AliceBlue" then colorValue = "#F0F8FF"
	if colorValue == "GhostWhite" then colorValue = "#F8F8FF"
	if colorValue == "WhiteSmoke" then colorValue = "#F5F5F5"
	if colorValue == "SeaShell" then colorValue = "#FFF5EE"
	if colorValue == "Beige" then colorValue = "#F5F5DC"                                					
	if colorValue == "OldLace" then colorValue = "#FDF5E6"
	if colorValue == "FloralWhite" then colorValue = "#FFFAF0"
	if colorValue == "Ivory" then colorValue = "#FFFFF0"
	if colorValue == "AntiqueWhite" then colorValue = "#FAEBD7"
	if colorValue == "Linen" then colorValue = "#FAF0E6"
	if colorValue == "LavenderBlush" then colorValue = "#FFF0F5"        
	if colorValue == "MistyRose" then colorValue = "#FFE4E1"
	//*****************************************************
	// Grey HEX Codes
	//*****************************************************	
	if colorValue == "Gainsboro" then colorValue = "#DCDCDC"
	if colorValue == "LightGray" then colorValue = "#D3D3D3"
	if colorValue == "Silver" then colorValue = "#C0C0C0"
	if colorValue == "DarkGray" then colorValue = "#A9A9A9"
	if colorValue == "Gray" then colorValue = "#808080"        
	if colorValue == "DimGray" then colorValue = "#696969"
	if colorValue == "LightSlateGray" then colorValue = "#778899"
	if colorValue == "SlateGray" then colorValue = "#708090"
	if colorValue == "DarkSlateGray" then colorValue = "#2F4F4F"
	if colorValue == "Black" then colorValue = "#000000"
	//*****************************************************                                      					   	
	return "<color=" + colorValue + ">" + self + "</color>"
end function

// Applies cspace tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the cspace tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} charSpacing
    // @param {boolean} closeTag
    // @description - `charSpacing`
    // @description - `closeTag`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within `<cspace>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Character Spaceing](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextCharacterSpacing.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    // @description ***footnotes***
    // @description Accepts pixels or font unit
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.cspace
    //  @example 
    //  print(result); // Outputs: <cspace=1em>Hello</cspace> 
string.cspace = function(charSpacing = "1em", closeTag = true)
    if locals.closeTag == true then
        return "<cspace=" + locals.charSpacing + ">" + self + "</cspace>"
    end if
    if locals.closeTag == false then
        return "<cspace=" + locals.charSpacing + ">" + self
    end if        
end function 

// Applies indent tag to the string
    // @description **Description:**
    // @description Modifies a text string to wrap it in the indent tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [alignment]
    // @description - `alignment` Accepted values: `left`, `center`, `right`, `justified`, and `flush`
    // @param {boolean} [closeTag]
    // @description - `closeTag` Accepted values: `true` or `false`
    //
    // @description **Parameter Defaults:**
    // @description - `alignment`:`center`
    // @description - `closeTag`:`true`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` the string value embedded in (or preceded by) the `<align>` tag
    // @description ---
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    // @description ---        
    // @description **Links:**
    // @description [Text Mesh Pro: Rich Text Indentation](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextIndentation.html)
    // @description ---       
    // @description ***footnotes***   
    // @description Parameters are not checked for validity   
    // @description - `alignment` will not reject invalid values | **Return**: `string<withParseIssues>`
    // @description - `closeTag` will not reject invalid values | **Return**: `null`
    // @description
    // @description If all paramaters passed are invalid | **Return**: `null`
    // @description ---          
    //
    // @return {string}
    // @example newString = "Hello"
    // @example 
    // @example result = newString.indent        
    // @example        
    // print(result); // Outputs: <indent=15%>Hello
string.indent = function(indentPercent="15%")
    return "<indent=" + locals.indentPercent+ ">" + self
end function 

// Applies italic tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the italic tag
    // @description ---
    //
    // @description **Parameters:** `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<i>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Italic](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextBoldItalic.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.italic
    //  @example 
    //  print(result); // Outputs: <i>Hello</i>         
string.italic = function()
    return "<i>" + self + "</i>"
end function    

// Applies line-indent tag to the string
    // @description **Description:**
    // @description Modifies a text string to wrap it in the line-indent tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [alignment]
    // @description - `alignment` Accepted values: `left`, `center`, `right`, `justified`, and `flush`
    // @param {boolean} [closeTag]
    // @description - `closeTag` Accepted values: `true` or `false`
    //
    // @description **Parameter Defaults:**
    // @description - `alignment`:`center`
    // @description - `closeTag`:`true`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` the string value embedded in (or preceded by) the `<align>` tag
    // @description ---
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    // @description ---        
    // @description **Links:**
    // @description [Text Mesh Pro: Rich Text Line Indentation](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextLineIndentation.html)
    // @description ---       
    // @description ***footnotes***   
    // @description Parameters are not checked for validity   
    // @description - `alignment` will not reject invalid values | **Return**: `string<withParseIssues>`
    // @description - `closeTag` will not reject invalid values | **Return**: `null`
    // @description
    // @description If all paramaters passed are invalid | **Return**: `null`
    // @description ---          
    //
    // @return {string}
    // @example newString = "Hello"
    // @example 
    // @example result = newString.line_indent("50%")
    // @example 
    // print(result); // Outputs: <line-indent=50%>Hello      
string.line_indent = function(lineIndent = "15%")
    return "<line-indent=" + locals.lineIndent + ">" + self
end function    

// Applies lowercase tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the lowercase tag
    // @description ---
    //
    // @description **Parameters:** `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<lowercase>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Lowercase](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextLetterCase.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.lowercase
    //  @example 
    //  print(result); // Outputs: <lowercase>Hello</lowercase>          
string.lowercase = function()
    return "<lowercase>" + self + "</lowercase>"
end function    

// Applies margin tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the margin tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [margin]
    // @description - `margin`:`string` | `Accepted values`: `em`, `px`, `%`
    //
    // @description **Parameter Defaults:**
    // @description - `margin`:`5em`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<margin>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Margin](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextMargins.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.margin
    //  @example 
    //  print(result); // Oleftutputs: <margin=5em>Hello</margin>           
string.margin = function(marginSpace = "5em")
    return "<margin=" + locals.marginSpace + ">" + self + "</margin>"
end function 


// Applies <margin-left> tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the <margin-left> tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [<margin-left]
    // @description - `<margin-left`:`string` | `Accepted values`: `em`, `px`, `%`
    //
    // @description **Parameter Defaults:**
    // @description - `<margin-left`:`5em`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<margin-left>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Margin-Left](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextMargins.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.margin-left
    //  @example 
    //  print(result); // Outputs: <margin-left=5em>Hello</margin-left>           
string.margin_left = function(marginSpace = "5em")
    return "<margin-left=" + locals.marginSpace + ">" + self + "</margin-left>"
end function 


// Applies <margin-right> tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the <margin-right> tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [<margin-right]
    // @description - `<margin-`:`string` | `Accepted values`: `em`, `px`, `%`
    //
    // @description **Parameter Defaults:**
    // @description - `<margin-right`:`5em`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<margin-right>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Margin-Right](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextMargins.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.margin-right
    //  @example 
    //  print(result); // Outputs: <margin-right=5em>Hello</margin-right>           
string.margin_right = function(marginSpace = "5em")
    return "<margin-right=" + locals.marginSpace + ">" + self + "</margin-right>"
end function 

// Applies mark tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the mark tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [color]
    // @description - `color`:`string` | #RRGGBBAA [ HEXA ] 
    //
    // @description **Parameter Defaults:**
    // @description - `color`:`#FFFF00AA`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<mark>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text mark](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextMark.html  )	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.mark
    //  @example 
    //  print(result); // Outputs: <mark="#FFFF00AA">Hello</mark>   
string.mark = function(color="#FFFF00AA")
    return "<mark=" + locals.color + ">" + self + "</mark>"
end function 

// Applies mark tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the mspace tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [color]
    // @description - `monospace`:`string` | `Accepted values`: `em`, `px`, `%`
    //
    // @description **Parameter Defaults:**
    // @description - `monospace`:`2.75em`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<mspace>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text mark](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextMonospace.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.mspace
    //  @example 
    //  print(result); // Outputs: <mspace="2.75em">Hello</mspace>     
string.mspace = function(monospace = "2.75em")
    return "<mspace=" + locals.monospace + ">" + self + "</mspace>"
end function   

// Applies nobr tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the nobr tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<nobr>` tag
    // @description ---
    //
    // @description **Links:**
    // @description [Text Mesh Pro: Rich Text No Break](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextNoBreak.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.nobr
    //  @example 
    //  print(result); // Output: <nobr>Hello</nobr>     
string.nobr = function()
    return "<nobr>" + self + "</nobr>"
end function 

// Applies noparse tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the noparse tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<noparse>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Noparse](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextNoParse.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.noparse
    //  @example 
    //  print(result); // Output: <noparse>Hello</noparse>     
string.noparse = function()
    return "<noparse>" + self + "</noparse>"
end function  

 // Applies page tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the page tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value with the `<page>` tag appended to the end
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Page Break](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextPageBreak.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.page
    //  @example 
    //  print(result); // Output: Hello<page>   
    string.page = function()
        return self + "<page>"
    end function 

    // Applies pos arse tag to the string
    // @description **Description:**
    // @description Modifies a text string by wrapping it within the rotate tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `degreesRotation`:`string`
    //
    // @description **Default Parameters:**
    // @description * `degreesRotation`:`"45"`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string rotated with the `<rotate>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rotate](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextRotate.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.rotate
    //  @example 
    //  print(result); // Output: <rotate="45">Hello </rotate>
string.rotate = function(degreesRotation = "45")
    return "<rotate=" + char(34) + locals.degreesRotation + char(34) + ">" + self + "</rotate>"
end function  

// Applies size tag to the string
    // @description **Description:**
    // @description Modifies a text string by wrapping it within the size tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `textSize`:`string`
    //
    // @description **Default Parameters:**
    // @description * `textSize`:`"5em"`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string wrapped within the `<size>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Font Size](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextSize.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.size
    //  @example 
    //  print(result); // Output: <size="5em">Hello </size>
string.size = function(textSize = "5em")
    return "<size=" + locals.textSize + ">" + self + "</size>"
end function

// Applies strike tag to the string
    // @description **Description:**
    // @description Modifies a text string by wrapping it within the strike tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string wrapped within the `<s>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Strikethrough](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextStrikethroughUnderline.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.strike
    //  @example 
    //  print(result); // Output: <s>Hello</s>
    string.strike = function()
        return "<s>" + self + "</s>"
    end function

    // Applies sub tag to the string
    // @description **Description:**
    // @description Modifies a text string by wrapping it within the sub tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string wrapped within the `<sub>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Subscript](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextSubSuper.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.sub
    //  @example 
    //  print(result); // Output: <sub>Hello</sub>    
    string.sub = function()
        return "<sub>" + self + "</sub>"    
    end function  

    // Applies sup tag to the string
    // @description **Description:**
    // @description Modifies a text string by wrapping it within the sup tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string wrapped within the `<sup>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Superscript](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextSubSuper.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.sup
    //  @example 
    //  print(result); // Output: <sup>Hello</sup> 
    string.sup = function()
        return "<sup>" + self + "</sup>"    
    end function

    // Applies pos arse tag to the string
    // @description **Description:**
    // @description Modifies a text string by prepending it with the pos tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `position`
    //
    // @description **Parameter Defaults:**
    // @description - `position`:`"50%"`    
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string prepended with the `<pos>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Horizontal Position](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextPos.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.pos
    //  @example 
    //  print(result); // Output: <pos=50%>Hello
string.pos = function(position = "50%")
    return "<pos=" + locals.position + ">" + self
end function


// Applies underline tag to the string
    // @description **Description:**
    // @description Modifies a text string by wrapping it within the underline tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string wrapped within the `<u>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Underline](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextStrikethroughUnderline.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.underline
    //  @example 
    //  print(result); // Output: <u>Hello</u>
string.underline = function()
    return "<u>" + self + "</u>"
end function

// Applies uppercase tag to the string
    // @description **Description:**
    // @description Modifies a text string by wrapping it within the uppercase tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string wrapped within the `<uppercase>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Uppercase](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextLetterCase.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.uppercase
    //  @example 
    //  print(result); // Output: <uppercase>Hello</uppercase>
    string.uppercase = function()
        return "<uppercase>" + self + "</uppercase>"
    end function

    // Applies voffset tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the voffset tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [verticalOffset]
    // @description - `verticalOffset`:`string` | `Accepted values`: `em`, `px`, `%`
    //
    // @description **Parameter Defaults:**
    // @description - `verticalOffset`:`1em`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<voffset>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Vertical Offset](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextVOffset.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.voffset
    //  @example 
    //  print(result); // Outputs: <voffset=1em>Hello</voffset>        
    string.voffset = function(verticalOffset = "1em")
        return "<voffset=" + locals.verticalOffset + ">" + self + "</voffset>"
    end function         

    // Applies width tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the width tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [width]
    // @description - `width`:`string` | `Accepted values`: `em`, `px`, `%`
    //
    // @description **Parameter Defaults:**
    // @description - `width`:`"50%"`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<width>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text Width](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextMargins.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.width
    //  @example 
    //  print(result); // Outputs: <width=50%>Hello</width>       
    string.width = function(hSize = "50%")
        return "<width=" + locals.hSize + ">" + self + "</width>"
    end function