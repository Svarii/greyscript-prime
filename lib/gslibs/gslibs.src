// @startuml
// !define FILE <&file>
// !define FOLDER <&folder>
// !define WARN <&warning>
// !define PLUS <&plus>
// !define MINUS <&minus>
// !define CLOUD <&cloud>
// !define MOBILE <&phone>
// !define INFO <&info>
// !define STAR <&star>
// !define DOCUMENT <&document>
// !define CALENDAR <&calendar>
// !define MAP <&map>
// !define LIST <&list>
// entity load_lib {
//   -string [libName = "metaxploit.so"]
//   -string [libDir = "/lib"]
//   -string [libType = ""]
// }
// load_lib : include_lib(libName, libDir, libType)
// load_lib : typeof(lib): string | null
// @enduml

// * **Description:**
// Loads a library from the lib directory, a specified directory, optionally verify type

// * **Description:**
// Loads a library from the lib directory, a specified directory, optionally verify type
// 
// @param {string} [libName] - The name of the library to load.
// @param {string} [libDir] - The directory where the library is located.
// @param {string} [libType] - The expected type of the library.
// @param {string} [libName] - The name of the library to load.
// @param {string} [libDir] - The directory where the library is located.
// @param {string} [libType] - The expected type of the library.
// 
//  * @return {objectLib | null}
// @example lib = load_lib                                              //Load metaxploit.so from /lib directory
// @example lib = load_lib("metaxploit.so")                             //Load a library without specifying type
// @example lib = load_lib("customLib.so", "/altLib")                   //Load a library from specified directory
// @example lib = load_lib("crypto.so", "/lib", "cryptoLib")            //Load a library with a specified type, return null on type mismatch
//  * @return {objectLib | null}
// @example lib = load_lib                                              //Load metaxploit.so from /lib directory
// @example lib = load_lib("metaxploit.so")                             //Load a library without specifying type
// @example lib = load_lib("customLib.so", "/altLib")                   //Load a library from specified directory
// @example lib = load_lib("crypto.so", "/lib", "cryptoLib")            //Load a library with a specified type, return null on type mismatch
load_lib = function(libName = "metaxploit.so", libDir = "/lib", libType ="")
    libLocation = libDir + "/" + libName
    if libName == "" then
        return get_shell.host_computer.File("/")
    end if
    yield; lib = include_lib(libLocation)
        if not typeof(lib) == null then
            if libType == "" then
                return lib
            else if typeof(lib) == libType then
                return lib
            end if
        else
            return null
        end if
end function


// * **Description:**
// Loads a library from the lib directory, a specified directory, optionally verify type

// * **Description:**
// Specifies Usage Information and number of required paramters.
// 
// @param {string} usage - The name of the library to load.
// @param {number} numReqParams - The directory where the library is located.
// @return {void}
// @example
// force_params("myApp [ipAddress] [port#]", 2)
force_params = function(usage, numReqParams)
	if params.len < 1 then exit usage
	if params[0] == "-h" or params[0] == "--help" then exit usage
	if params.len < numReqParams then exit usage
    if params.len > numReqParams then exit usage + "{Too many paramters}"
end function

program_name = function()
	splitVal = program_path.split("/")
	splitVal.reverse
	return trim(splitVal[0])
end function


// * **Description:**
// Checks if object is null, if null, print / return / exit options
// @param {number} signalStrength - The name of the library to load.
// @return {true | false} calcACK
// @example is_null(testObj, "r")  //If not is_null(testObj) return false else true
// @example is_null(testObj, "p-r", "error: testObj is null")  //If not is_null(testObj) print error message and return false else true
// @example is_null(testObj, "e")  //If is_null(testObj) //exits program if testObj is null
// @example is_null(testObj, "e", "Critical Error.  Terminating Program")  //If is_null(testObj) //exits program if testObj is null with error message
is_null = function (testObj, failType = "r", failStr = "")
failOptions = split("failType", "-")
locals.failPrint = false
locals.failReturn = false
locals.failExit = false
	for option in failOptions
		if option == "p" then locals.failPrint true
		if option == "r" then locals.failReturn true
		if option == "e" then locals.failExit true
	end for
	if testObj == null then
		if failType == "p" then
			print failString
		end if		
		if failType == "r" then
			return true
		end if		
		if failType == "e" then
			exit failString		
		end if		
		if failType == "r" then
			return false
		else
			return null
		end if
	end if
end function

program_name = function()
	splitVal = program_path.split("/")
	splitVal.reverse
	return trim(splitVal[0])
end function

network_device_list = function(user = "", pass = "")
	networkDevices = split(get_shell(user,pass).host_computer.network_devices, char(10))
	networkDeviceList = []
	for device in networkDevices
		if device then networkDeviceList.push(split(device, " "))
	end for
	return networkDeviceList
end function


// * **Description:**
// Checks Types and specifies on-fail action
// @param {number} signalStrength - The name of the library to load.
// @return {number} calcACK
// @example is_type(myObject, "cryptoLib")  //If not typeof(cryptoLib) return false else true
// @example is_type(myObject, "metaxploitLib", "exit") //exit the program on failure to match
// @example is_type(myObject, "aptclientLib", "exit", "Unable to to load aptclientLib.so") //exit with error message
// @example is_type(myObject, "SystemObject", "print") //print result as string
is_type = function(Object, ObjectType, failType = "return", failStr = "")
	if failType == "return" then
		if not typeof(Object) == ObjectType then return false
		return true
	end if
	if failType == "exit" then
		if not typeof(Object) == ObjectType then exit failStr
		return true
	end if
	if failType == "print" then
		if not typeof(Object) == ObjectType then print "false"; exit
	end if	
end function

// * **Description:**
// Caculates the recommended amount of ACKs to collect
// @param {number} signalStrength - The name of the library to load.
// @return {number} calcACK
// @example reqACK = calcACK(6)
// @example print(reqACK) // Output: 50000
calcACK = function(signalStrength = 1)
    if signalStrength <= 0 or signalStrength > 100 then return null
    return ceil(300000 / signalStrength)
end function