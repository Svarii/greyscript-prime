//GreyScript Prime version 0.2a by Svarii


    //@name align
        //  * @startuml
        //  * entity StringObject
        //  * control ".align" as align
        //  *   StringObject -> align : string
        //  *   align -> StringObject : //<align="center">//string//</align>//
        //  * footer
        //  *   string.align("center")
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.align

        //  **Description:**  
        //  Applies align tag to the given text. | [tmp \<align> docs](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextAlignment.html)
        //  @param {string} alignment
        //  @param {boolean} [closeTag]
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example //options: left, right, center, justified, flush
        //  @example result = newString.align("center")
        //  @example 
        //  print(result); // Outputs: <align="center">Hello</align>
        //  @example         
        //  @example result = newString.align("center", false)
        //  @example 
        //  print(result); // Outputs: <align="center">Hello         
    string.align = function(alignment = "center", closeTag = true)
        if closeTag == true then
            return "<align=" + char(34) + alignment + char(34) + ">" + self + "</align>"
        end if
        if closeTag == false then
            return "<align=" + char(34) + alignment + char(34) + ">" + self
        end if        
    end function

    //@name alpha
        //  * @startuml
        //  * entity StringObject
        //  * control ".alpha" as alpha
        //  *   StringObject -> alpha : string
        //  *   alpha -> StringObject : //<alpha=#4C>//string
        //  * footer
        //  *   string.alpha("#4C")
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.alpha

        //  **Description:**  
        //  Applies alpha to the given text. | [tmp \<alpha> docs](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextOpacity.html)
        //  @param {string} hexOpacity
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.alpha("#4C")
        //  @example 
        //  print(result); // Outputs: <alpha=#4C>Hello       
    string.alpha = function(hexOpactiy)
        return "<alpha=" + hexOpactiy + ">" + self
    end function
 
    //@name bold
        //  * @startuml
        //  * entity StringObject
        //  * control ".bold" as bold
        //  *   StringObject -> bold : string
        //  *   bold -> StringObject : //<b>//string//</b>//
        //  * footer
        //  *   string.bold
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.bold

        //  **Description:**  
        //  Applies bold to the given text.  | [tmp \<bold> docs](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextBoldItalic.html)
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.bold
        //  @example 
        //  print(result); // Outputs: <b>Hello</b>       
    string.bold = function()
        return "<b>" + self + "</b>"
    end function

    //@name cspace
        //  * @startuml
        //  * entity StringObject
        //  * control ".cspace" as cspace
        //  *   StringObject -> cspace : string
        //  *   cspace -> StringObject : //<cspace=1em>//string//</cspace>//
        //  * footer
        //  *   string.cspace("1em")
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.cspace

        //  **Description:**  
        //  Applies cspace to the given text.  | [tmp \<cspace> docs](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextCharacterSpacing.html)
        //  @param {string} charSpacing
        //  @param {boolean} [closeTag]
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.cspace
        //  @example 
        //  print(result); // Outputs: <cspace=1em>Hello</cspace>
    string.cspace = function(charSpacing = "1em", closeTag = true)
        if closeTag == true then
            return "<cspace=" + charSpacing + ">" + self + "</cspace>"
        end if
        if closeTag == false then
            return "<cspace=" + charSpacing + ">" + self
        end if        
    end function

    //@name color
        //  * @startuml        
        //  *   entity StringObject
        //  *   control ".color" as color
        //  *       StringObject -> color : .color("blue")
        //  *       color -> StringObject : "<color=blue>string</color>"
        //  *   footer
        //  *       string.color()
        //  *   endfooter        
        //  * @enduml               
        // ANCHOR string.color 

        //  **Description:**
        //  Color values maybe be #**FFFFFF** or **color** format
        //  @description All names from https://htmlcolorcodes.com/color-names/ are valid (case sensitive)
        //  
        //  @param {string} colorValue - The color to apply.
        //  @return {string} - The colorized text.
        //  @example newString = "Hello"   
        //  @example 
        //  @example result = newString.color("blue");
        //  @example     
        //  print(result); // Outputs: <color=blue>Hello</color>
        //  @example        
        //  @example result = newString.color("#FFFFFF");
        //  @example   
        //  print(result); // Outputs: <color=#FFFFFF>Hello</color>
        //  @example        
        //  @example result = newString.color("Aquamarine");
        //  @example   
        //  print(result); // Outputs: <color=#7FFFD4>Hello</color>                 
    string.color = function(colorValue = "red")
        if not typeof(colorValue) == "string" then return null
		//*****************************************************
		// Red HEX Codes
		//*****************************************************	
		if colorValue == "IndianRed" then colorValue = "#CD5C5C"
		if colorValue == "LightCoral" then colorValue = "#F08080"
		if colorValue == "Salmon" then colorValue = "#FA8072"
		if colorValue == "DarkSalmon" then colorValue = "#E9967A"
		if colorValue == "LightSalmon" then colorValue = "#FFA07A"			
		if colorValue == "Crimson" then colorValue = "#DC143C"
		if colorValue == "Red" then colorValue = "#FF0000"
		if colorValue == "FireBrick" then colorValue = "#B22222"
		if colorValue == "DarkRed" then colorValue = "#8B0000"
		//*****************************************************
		// Pink HEX Codes
		//*****************************************************		
		if colorValue == "Pink" then colorValue = "#FFC0CB"
		if colorValue == "LightPink" then colorValue = "#FFB6C1"		
		if colorValue == "HotPink" then colorValue = "#FF69B4"		
		if colorValue == "DeepPink" then colorValue = "#FF1493"		
		if colorValue == "MediumVioletRed" then colorValue = "#C71585"				
		if colorValue == "PaleVioletRed" then colorValue = "#DB7093"				
		//*****************************************************
		// Orange HEX Codes
		//*****************************************************					
		if colorValue == "Coral" then colorValue = "#FF7F50"						
		if colorValue == "Tomato" then colorValue = "#FF6347"				
		if colorValue == "OrangeRed" then colorValue = "#FF4500"						
		if colorValue == "DarkOrange" then colorValue = "#FF8C00"				
		if colorValue == "Orange" then colorValue = "#FFA500"						
		//*****************************************************
		// Yellow HEX Codes
		//*****************************************************
		if colorValue == "Gold" then colorValue = "#FFD700"
		if colorValue == "Yellow" then colorValue = "#FFFF00"
		if colorValue == "LightYellow" then colorValue = "#FFFFE0"
		if colorValue == "LemonChiffon" then colorValue = "#FFFACD"
        if colorValue == "LightGoldenrodYellow" then colorValue = "#FAFAD2"        
		if colorValue == "PapayaWhip" then colorValue = "#FFEFD5"
		if colorValue == "Moccasin" then colorValue = "#FFE4B5"
		if colorValue == "PeachPuff" then colorValue = "#FFDAB9"
		if colorValue == "PaleGoldenrod" then colorValue = "#EEE8AA"
		if colorValue == "Khaki" then colorValue = "#F0E68C"                                					
        if colorValue == "DarkKhaki" then colorValue = "#BDB76B"                                					        
		//*****************************************************
		// Purple HEX Codes
		//*****************************************************
		if colorValue == "Lavender" then colorValue = "#E6E6FA"
		if colorValue == "Thistle" then colorValue = "#D8BFD8"
		if colorValue == "Plum" then colorValue = "#DDA0DD"
		if colorValue == "Violet" then colorValue = "#EE82EE"
        if colorValue == "Orchid" then colorValue = "#DA70D6"        
		if colorValue == "Fuchsia" then colorValue = "#FF00FF"
		if colorValue == "Magenta" then colorValue = "#FF00FF"
		if colorValue == "MediumOrchid" then colorValue = "#BA55D3"
		if colorValue == "MediumPurple" then colorValue = "#9370DB"
		if colorValue == "RebeccaPurple" then colorValue = "#663399"                                					
        if colorValue == "BlueViolet" then colorValue = "#8A2BE2"
		if colorValue == "DarkViolet" then colorValue = "#9400D3"
		if colorValue == "DarkOrchid" then colorValue = "#9932CC"
		if colorValue == "DarkMagenta" then colorValue = "#8B008B"
		if colorValue == "Purple" then colorValue = "#800080"
        if colorValue == "Indigo" then colorValue = "#4B0082"        
		if colorValue == "SlateBlue" then colorValue = "#6A5ACD"
		if colorValue == "DarkSlateBlue" then colorValue = "#483D8B"
		if colorValue == "MediumSlateBlue" then colorValue = "#7B68EE" 
		//*****************************************************
		// Green HEX Codes
		//*****************************************************
		if colorValue == "GreenYellow" then colorValue = "#ADFF2F"
		if colorValue == "Chartreuse" then colorValue = "#7FFF00"
		if colorValue == "LawnGreen" then colorValue = "#7CFC00"
		if colorValue == "Lime" then colorValue = "#00FF00"
        if colorValue == "LimeGreen" then colorValue = "#32CD32"        
		if colorValue == "PaleGreen" then colorValue = "#98FB98"
		if colorValue == "LightGreen" then colorValue = "#90EE90"
		if colorValue == "MediumSpringGreen" then colorValue = "#00FA9A"
		if colorValue == "SeaGreen" then colorValue = "#2E8B57"
		if colorValue == "ForestGreen" then colorValue = "#228B22"                                					
        if colorValue == "Green" then colorValue = "#008000"
		if colorValue == "DarkGreen" then colorValue = "#006400"
		if colorValue == "YellowGreen" then colorValue = "#9ACD32"
		if colorValue == "OliveDrab" then colorValue = "#6B8E23"
		if colorValue == "Olive" then colorValue = "#808000"
        if colorValue == "DarkOliveGreen" then colorValue = "#556B2F"        
		if colorValue == "MediumAquamarine" then colorValue = "#66CDAA"
		if colorValue == "DarkSeaGreen" then colorValue = "#8FBC8B"
		if colorValue == "LightSeaGreen" then colorValue = "#20B2AA" 
        if colorValue == "DarkCyan" then colorValue = "#008B8B"        
		if colorValue == "Teal" then colorValue = "#008080"
		//*****************************************************
		// Blue HEX Codes
		//*****************************************************	
		if colorValue == "Aqua" then colorValue = "#00FFFF"
		if colorValue == "Cyan" then colorValue = "#00FFFF"
		if colorValue == "LightCyan" then colorValue = "#E0FFFF"
		if colorValue == "PaleTurquoise" then colorValue = "#AFEEEE"
        if colorValue == "Aquamarine" then colorValue = "#7FFFD4"        
		if colorValue == "Turquoise" then colorValue = "#40E0D0"
		if colorValue == "MediumTurquoise" then colorValue = "#48D1CC"
		if colorValue == "DarkTurquoise" then colorValue = "#00CED1"
		if colorValue == "CadetBlue" then colorValue = "#5F9EA0"
		if colorValue == "SteelBlue" then colorValue = "#4682B4"                           					
        if colorValue == "LightSteelBlue" then colorValue = "#B0C4DE"
		if colorValue == "PoweredBlue" then colorValue = "#B0E0E6"
		if colorValue == "LightBlue" then colorValue = "#ADD8E6"
		if colorValue == "SkyBlue" then colorValue = "#87CEEB"
		if colorValue == "LightSkyBlue" then colorValue = "#87CEFA"
        if colorValue == "DeepSkyBlue" then colorValue = "#00BFFF"        
		if colorValue == "DodgerBlue" then colorValue = "#1E90FF"
		if colorValue == "CornflowerBlue" then colorValue = "#6495ED"
		if colorValue == "MediumSlateBlue" then colorValue = "#7B68EE"
		if colorValue == "RoyalBlue" then colorValue = "#4169E1"
		if colorValue == "Blue" then colorValue = "#0000FF"
		if colorValue == "MediumBlue" then colorValue = "#0000CD"
		if colorValue == "DarkBlue" then colorValue = "#00008B"  
		if colorValue == "Navy" then colorValue = "#000080"
		if colorValue == "MidnightBlue" then colorValue = "#191970"                        
		//*****************************************************
		// Brown HEX Codes
		//*****************************************************	
		if colorValue == "Cornsilk" then colorValue = "#FFF8DC"
		if colorValue == "BlanchedAlmond" then colorValue = "#FFEBCD"
		if colorValue == "Bisque" then colorValue = "#FFE4C4"
		if colorValue == "NavajoWhite" then colorValue = "#FFDEAD"
        if colorValue == "Wheat" then colorValue = "#F5DEB3"        
		if colorValue == "BurlyWood" then colorValue = "#D#B887"
		if colorValue == "Tan" then colorValue = "#D2B48C"
		if colorValue == "RosyBrown" then colorValue = "#BC8F8F"
		if colorValue == "SandyBrown" then colorValue = "#F4A460"
		if colorValue == "Goldenrod" then colorValue = "#DAA520"                                					
        if colorValue == "DarkGoldenrod" then colorValue = "#B8860B"
		if colorValue == "Peru" then colorValue = "#CD853F"
		if colorValue == "Chocolate" then colorValue = "#D2691E"
		if colorValue == "SaddleBrown" then colorValue = "#8B4513"
		if colorValue == "Sienna" then colorValue = "#A0522D"
        if colorValue == "Brown" then colorValue = "#A52A2A"        
		if colorValue == "Maroon" then colorValue = "#800000"          			
		//*****************************************************
		// White HEX Codes
		//*****************************************************	
		if colorValue == "White" then colorValue = "#FFFFFF"
		if colorValue == "Snow" then colorValue = "#FFFAFA"
		if colorValue == "HoneyDew" then colorValue = "#F0FFF0"
		if colorValue == "MintCream" then colorValue = "#F5FFFA"
        if colorValue == "Azure" then colorValue = "#F0F8FF"        
		if colorValue == "AliceBlue" then colorValue = "#F0F8FF"
		if colorValue == "GhostWhite" then colorValue = "#F8F8FF"
		if colorValue == "WhiteSmoke" then colorValue = "#F5F5F5"
		if colorValue == "SeaShell" then colorValue = "#FFF5EE"
		if colorValue == "Beige" then colorValue = "#F5F5DC"                                					
        if colorValue == "OldLace" then colorValue = "#FDF5E6"
		if colorValue == "FloralWhite" then colorValue = "#FFFAF0"
		if colorValue == "Ivory" then colorValue = "#FFFFF0"
		if colorValue == "AntiqueWhite" then colorValue = "#FAEBD7"
		if colorValue == "Linen" then colorValue = "#FAF0E6"
        if colorValue == "LavenderBlush" then colorValue = "#FFF0F5"        
		if colorValue == "MistyRose" then colorValue = "#FFE4E1"
		//*****************************************************
		// Grey HEX Codes
		//*****************************************************	
		if colorValue == "Gainsboro" then colorValue = "#DCDCDC"
		if colorValue == "LightGrey" then colorValue = "#D3D3D3"
		if colorValue == "Silver" then colorValue = "#C0C0C0"
		if colorValue == "DarkGrey" then colorValue = "#A9A9A9"
        if colorValue == "Grey" then colorValue = "#808080"        
		if colorValue == "DimGrey" then colorValue = "#696969"
		if colorValue == "LightSlateGray" then colorValue = "#778899"
		if colorValue == "SlateGrey" then colorValue = "#708090"
		if colorValue == "DarkSlateGrey" then colorValue = "#2F4F4F"
		if colorValue == "Black" then colorValue = "#000000"
        //*****************************************************	                                       					   	
        return "<color=" + colorValue + ">" + self + "</color>"
    end function

    //@name indent
        //  * @startuml
        //  * entity StringObject
        //  * control ".indent" as indent
        //  *   StringObject -> indent : string
        //  *   indent -> StringObject : //<indent=15%>//string
        //  * footer
        //  *   string.indent("15%")
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.indent

	    //  **Description:**
        //  Applies indent to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.indent        
        //  @example        
        //  print(result); // Outputs: <indent=15%>Hello        
    string.indent = function(indentPercent="15%")
        return "<indent=" + indentPercent+ ">" + self
    end function 


    //@name italic
        //  * @startuml
        //  * entity StringObject
        //  * control ".italic" as italic
        //  *   StringObject -> italic : string
        //  *   italic -> StringObject : //<i>//string//</i>//
        //  * footer
        //  *   string.italic
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.italic

	    //  **Description:**
        //  Applies italic to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.italic        
        //  @example        
        //  print(result); // Outputs: <i>Hello</i>         
    string.italic = function()
        return "<i>" + self + "</i>"
    end function 

    //@name line-indent
        // ANCHOR string.line-indent

        //  **Description:**  
        //  Applies line-indent tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.line_indent("50%")
        //  @example 
        //  print(result); // Outputs: <line-indent=50%>Hello       
    string.line_indent = function(lineIndent = "15%")
        return "<line-indent=" + lineIndent + ">" + self
    end function    

    //@name underline 
        //  * @startuml
        //  * entity StringObject
        //  * control ".underline" as underline
        //  *   StringObject -> underline : string
        //  *   underline -> StringObject : //<u>//string//</u>//
        //  * footer
        //  *   string.underline
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.underline

        //  **Description:**
        //  Applies underline to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.underline
        //  @example        
        //  print(result); // Outputs: <u>Hello</u>
    string.underline = function()
        return "<u>" + self + "</u>"
    end function

    //@name strike
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".strike" as strike
        //  * StringObject -> strike : string
        //  * strike -> StringObject : //<s>//string//</s>//
        //  * footer
        //  * string.strike
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.strike

        //  **Description:**
        //  Applies strikethrough to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.strike
        //  @example 
        //  print(result); // Outputs: <s>Hello</s>
    string.strike = function()
        return "<s>" + self + "</s>"
    end function

    //@name margin
        //  * @startuml
        //  * entity StringObject
        //  * control ".margin" as margin
        //  *   StringObject -> margin : string
        //  *   margin -> StringObject : //<margin=5em>//string//</margin>//
        //  * footer
        //  *   string.margin("5em")
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.margin

        //  **Description:**  
        //  Applies margin tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.margin("5em")
        //  @example 
        //  print(result); // Outputs: <margin=5em>Hello</margin>   
    string.margin = function(marginSpace = "5em")
        return "<margin=" + marginSpace + ">" + self + "</margin>"
    end function    

    //@name mark
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".mark" as mark
        //  * StringObject -> mark : string
        //  * mark -> StringObject : //<mark>//string//</mark>//
        //  * footer
        //  * string.mark
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.mark

        //  **Description:**
        //  Applies mark to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.mark
        //  @example
        //  print(result); // Outputs: <mark>Hello</mark>
    string.mark = function(color="FFFF00AA")
        return "<mark>" + self + "</mark>"
    end function

    //@name mspace
        //  * @startuml
        //  * entity StringObject
        //  * control ".mspace" as mspace
        //  *   StringObject -> mspace : string
        //  *   mspace -> StringObject : //<mspace=2.75em>//string//</mspace>//
        //  * footer
        //  *   string.mspace("2.75em")
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.mspace

        //  **Description:**  
        //  Applies mspace tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.mspace("2.75em")
        //  @example 
        //  print(result); // Outputs: <mspace=2.75em>Hello</mspace>     
    string.mspace = function(monospace = "2.75em")
        return "<mspace=" + monospace + ">" + self + "</mspace>"
    end function    

    //@name nobr
        //  * @startuml
        //  * entity StringObject
        //  * control ".nobr" as nobr
        //  *   StringObject -> nobr : string
        //  *   nobr -> StringObject : //**<nobr>**//string//**</nobr>**//
        //  * footer
        //  *   string.nobr
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.nobr

        //  **Description:**  
        //  Applies nobr tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.nobr
        //  @example 
        //  print(result); // Outputs: <nobr>Hello</nobr>     
    string.nobr = function()
        return "<nobr>" + self + "</nobr>"
    end function  

    //@name noparse
        //  * @startuml
        //  * entity StringObject
        //  * control ".noparse" as noparse
        //  *   StringObject -> noparse : string
        //  *   noparse -> StringObject : //**<noparse>**//string//**</noparse>**//
        //  * footer
        //  *   string.noparse
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.noparse

        //  **Description:**  
        //  Applies noparse tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.noparse
        //  @example 
        //  print(result); // Outputs: <noparse>Hello</noparse>     
    string.noparse = function()
        return "<noparse>" + self + "</noparse>"
    end function  

    //@name pos
        //  * @startuml
        //  * entity StringObject
        //  * control ".pos" as pos
        //  *   StringObject -> pos : string
        //  *   pos -> StringObject : //<pos=50%>//string
        //  * footer
        //  *   string.pos
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.pos

        //  **Description:**  
        //  Applies pos tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.pos("50%")
        //  @example 
        //  print(result); // Outputs: <pos=50%>Hello       
    string.pos = function(posPercent = "50%")
        return "<pos=" + posPercent + ">" + self
    end function       

    //@name rotate
        //  * @startuml
        //  * entity StringObject
        //  * control ".rotate" as rotate
        //  *   StringObject -> rotate : string
        //  *   rotate -> StringObject : //**<rotate="45">**//string//**</rotate>**//
        //  * footer
        //  *   string.rotate("45")
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.rotate

        //  **Description:**  
        //  Applies rotate tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.rotate
        //  @example 
        //  print(result); // Outputs: <rotate="45">Hello</rotate>     
    string.rotate = function(degreesRotation = "45")
        return "<rotate=" + char(34) + degreesRotation + char(34) + ">" + self + "</rotate>"
    end function      

    //@name sub
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".sub" as sub
        //  * StringObject -> sub : string
        //  * sub -> StringObject : //<sub>//string//</sub>//
        //  * footer
        //  * string.sub
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.sub   

        //  **Description:**
        //  Applies subscript to the given text.
        //   
        //  @return {string}
        //  @example newString = "Hello"     
        //  @example result = newString.sub
        //  @example        
        //  print(result); // Outputs: <sub>Hello</sub>
    string.sub = function()
        return "<sub>" + self + "</sub>"    
    end function

    //@name sup
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".sup" as sup
        //  * StringObject -> sup : string
        //  * sup -> StringObject : //<sup>//string//</sup>//
        //  * footer
        //  * string.sup
        //  * endfooter         
        //  * @enduml        
        // ANCHOR string.sup  

        //  **Description:**
        //  Applies superscript to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.sup       
        //  @example
        //  print(result); // Outputs: <sup>Hello</sup>
    string.sup = function()
        return "<sup>" + self + "</sup>"    
    end function

    //@name remove_char_last
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_char_last" as remove_char_last
        //  * StringObject -> remove_char_last : string
        //  * remove_char_last -> StringObject : strin
        //  * footer
        //  * string.remove_char_last
        //  * endfooter 
        //  * @enduml        
        // ANCHOR string.remove_char_last  

        //  **Description:**
        //  Remove the last character of the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example             
        //  @example result = newString.remove_char_last
        //  @example          
        //  print(result); // Outputs: Hell
   string.remove_char_last = function()
        return slice(self, 0, (self.len - 1))
    end function

    //@name remove_char_first
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_char_first" as remove_char_first
        //  * StringObject -> remove_char_first : string
        //  * remove_char_first -> StringObject : tring
        //  * footer
        //  * string.remove_char_first
        //  * endfooter 
        //  * @enduml        
        // ANCHOR string.remove_char_first

        //  **Description:**
        //  Remove the first character of the given text.
        //  @return {string}
        //  @example newString = "Hello"
        //  @example    
        //  @example result = newString.remove_char_first
        //  @example          
        //  print(result); // Outputs: ello
    string.remove_char_first = function()
        return slice(self, 1, (self.len))
    end function

    //@name remove_bold
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_bold" as remove_bold
        //  *   StringObject -> remove_bold : //<b>//string//</b>//
        //  *   remove_bold -> StringObject : string
        //  *   StringObject -> remove_bold : //<b>//string//</b>// //<b>//string//</b>//
        //  *   remove_bold -> StringObject : string string
        //  * footer
        //  *   string.remove_bold
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.remove_bold

        //  **Description:**
        //  Remove the bold tag of the given text.
        //  @return {string}
        //  @example newString = "<b>Hello</b>"
        //  @example        
        //  @example result = newString.remove_bold
        //  @example
        //  print(result); // Outputs: Hello 
    string.remove_bold = function()
        newString = self.remove("<b>")
        return newString.remove("</b>")
    end function

    //@name remove_italic 
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_italic" as remove_italic
        //  *   StringObject -> remove_italic : //<i>//string//</i>//
        //  *   remove_italic -> StringObject : string
        //  *   StringObject -> remove_italic : //<i>//string//</i>// //<i>//string//</i>//
        //  *   remove_italic -> StringObject : string string
        //  * footer
        //  *   string.remove_italic
        //  * endfooter           
        //  * @enduml            
        // ANCHOR string.remove_italic   

        //  **Description:**
        //  Remove the italic tag of the given text.
        //  @example 
        //  @return {string}
        //  @example newString = "<i>Hello</i>"  
        //  @example result = newString.remove_italic
        //  @example        
        //  print(result); // Outputs: Hello
    string.remove_italic = function()
        newString = self.remove("<i>")
        return newString.remove("</i>")
    end function

    //@name remove_underline
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_underline" as remove_underline
        //  *   StringObject -> remove_underline : //<u>//string//</u>//
        //  *   remove_underline -> StringObject : string
        //  *   StringObject -> remove_underline : //<u>//string//</u>// //<u>//string//</u>//
        //  *   remove_underline -> StringObject : string string 
        //  * footer
        //  *   string.remove_underline
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.remove_underline

        //  **Description:**
        //  Remove the underline tag of the given text.
        //  
        //  @return {string}
        //  @example newString = "<u>Hello</u>"
        //  @example        
        //  @example result = newString.remove_underline
        //  @example        
        //  print(result); // Outputs: Hello
    string.remove_underline = function()
        newString = self.remove("<u>")
        return newString.remove("</u>")
    end function

    //@name remove_strike    
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_strike" as remove_strike
        //  *   StringObject -> remove_strike : //<s>//string//</s>//
        //  *   remove_strike -> StringObject : string
        //  *   StringObject -> remove_strike : //<s>//string//</s>// //<s>//string//</s>//
        //  *   remove_strike -> StringObject : string string
        //  * footer
        //  *   string.remove_strike
        //  * endfooter             
        //  * @enduml        
        // ANCHOR string.remove_strike  

        //  **Description:**
        //  Remove the strikethrough tag of the given text.
        //  
        //  @return {string}
        //  @example newString = "<s>Hello</s>"
        //  @example 
        //  @example result = newString.remove_strike
        //  @example         
        //  print(result); // Outputs: Hello
    string.remove_strike = function()
        newString = self.remove("<s>")
        return newString.remove("</s>")
    end function

    //@name remove_mark    
        //  * **Description:**
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_mark" as remove_mark
        //  *   StringObject -> remove_mark : //<mark>//string//</mark>//
        //  *   remove_mark -> StringObject : string
        //  *   StringObject -> remove_mark : //<mark>//string//</mark>// //<mark>//string//</mark>//
        //  *   remove_mark -> StringObject : string string   
        //  * footer
        //  *   string.remove_mark
        //  * endfooter               
        //  * @enduml        
        // ANCHOR string.remove_mark  

        //  **Description:**
        //  Remove the mark tag of the given text.
        //  @return {string}
        //  @example newString = "<mark>Hello</mark>"
        //  @example 
        //  @example result = newString.remove_mark
        //  @example
        //  print(result); // Outputs: Hello
    string.remove_mark = function()
        newString = self.remove("<mark>")
        return newString.remove("</mark>")
    end function

    //@name remove_sub    
        //  * **Description:**
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_sub" as remove_sub
        //  *   StringObject -> remove_sub : //<sub>//string//</sub>//
        //  *   header string.remove_sub
        //  *   remove_sub -> StringObject : string
        //  *   StringObject -> remove_sub : //<sub>//string//</sub>// //<sub>//string//</sub>//
        //  *   remove_sub -> StringObject : string string  
        //  * footer
        //  *   string.remove_sub
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.remove_sub  

        //  **Description:**
        //  Remove the sub tag of the given text.
        //  @return {string}
        //  @example newString = "<sub>Hello</sub>"     
        //  @example 
        //  @example result = newString.remove_sub
        //  @example                
        //  print(result); // Outputs: Hello
    string.remove_sub = function()
        newString = self.remove("<sub>")
        return newString.remove("</sub>")
    end function

    //@name remove_sup
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_sup" as remove_sup
        //  *   StringObject -> remove_sup : //<sup>//string//</sup>//
        //  *   header string.remove_sup
        //  *   remove_sup -> StringObject : string
        //  *   StringObject -> remove_sup : //<sup>//string//</sup>// //<sup>//string//</sup>//
        //  *   remove_sup -> StringObject : string string  
        //  * footer
        //  *   string.remove_sup
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.remove_sup   

        //  **Description:**
        //  Remove the sup tag of the given text.
        //  @return {string}
        //  @example newString = "<sup>Hello</sup>"
        //  @example 
        //  @example result = newString.remove_sup        
        //  @example
        //  print(result); // Outputs: Hello
    string.remove_sup = function()
        newString = self.remove("<sup>")
        return newString.remove("</sup>")
    end function

    //@name extract
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".extract_between" as extract_between
        //  *   StringObject -> extract_between : //<b>//string//</b>//
        //  *   header string.extract_between("//<b>//", "</b>")
        //  *   extract_between -> StringObject : string
        //  * footer
        //  *   string.extract_between(start, end)
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.extract_between

        //  **Description:**
        //  Extract the text between the first found indexies of the given start and end strings        
        //  @description **Default:** Extract the text between the first found bold tag if no paramaters provided
        //  @param {string} [tagStart = "<b>""]
        //  @param {string} [tagEnd = "</b>"]
        //  @return {string or null}
        //  @example newString = "<b>0x53C737</b>"
        //  @example 
        //  @example result = newString.extract_between("<b>", "</b>")
        //  @example           
        //  print(result); // Outputs: 0x53C737   
    string.extract = function(tagStart = "<b>", tagEnd = "</b>")
        startIndex = self.indexOf(tagStart) + (tagStart.len)
        endIndex = self.indexOf(tagEnd) - (tagEnd.len - tagStart.len) + 1
        return slice(self, startIndex, endIndex)
    end function
 
    //@name format
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".format" as format
        //  * StringObject -> format : string
        //  * header string.format(["fox", "dog"])
        //  * format -> StringObject : string formatted
        //  * footer
        //  * string.format([argsList])
        //  * endfooter          
        //  * @enduml        
        // ANCHOR string.format

        //  **Description:**
        //  Allows for string interpolation
        //  @contributer dynobytes
        //  @param {list<string>} args - List of values for delim
        //  @param {string} [delim="%s"]
        //  @return {string}
        //  @example variableString = "The quick brown %s jumps over the lazy %s"
        //  @example animalsList = ["fox", "dog"] 
        //  @example      
        //  @example sentence = variableString.format(animalsList)
        //  @example
        //  print(sentence); // Outputs: The quick brown fox jumps over the lazy dog
    string.format = function(args, delim="%s")
        locals.splitStr = self.split(delim);
        locals.recompStr = ""
        for i in range(0, args.len()-1)
            locals.recompStr = locals.recompStr + locals.splitStr[i] + args[i]  
        end for
            locals.recompStr = locals.recompStr + locals.splitStr[locals.splitStr.len()-1]
        return locals.recompStr
    end function

    //@name uppercase
        //  * @startuml
        //  * entity StringObject
        //  * control ".uppercase" as uppercase
        //  *   StringObject -> uppercase : string
        //  *   uppercase -> StringObject : //<uppercase>//string//</uppercase>//
        //  * footer
        //  *   string.uppercase
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.uppercase

        //  **Description:**  
        //  Applies capitalization to all characters of a string
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.uppercase("center")
        //  @example 
        //  print(result); // Outputs: <uppercase>Hello</uppercase>       
    string.uppercase = function(alignment = "left")
        return "<align=" + alignment + ">" + self + "</align>"
    end function


    //@name voffset
        //  * @startuml
        //  * entity StringObject
        //  * control ".voffset" as voffset
        //  *   StringObject -> voffset : string
        //  *   voffset -> StringObject : //**<voffset=1em>**//string//**</voffset>**//
        //  * footer
        //  *   string.voffset("1em")
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.voffset

        //  **Description:**  
        //  Applies voffset tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.voffset
        //  @example 
        //  print(result); // Outputs: <voffset=1em>Hello</voffset>     
    string.voffset = function(verticalOffset = "1em")
        return "<voffset=" + verticalOffset + ">" + self + "</voffset>"
    end function   
    
   //@name width
        //  * @startuml
        //  * entity StringObject
        //  * control ".width" as width
        //  *   StringObject -> width : string
        //  *   width -> StringObject : //**<width=50%>**//string//**</width>**//
        //  * footer
        //  *   string.width
        //  * endfooter           
        //  * @enduml        
        // ANCHOR string.width

        //  **Description:**  
        //  Applies width tag to the given text.
        //  
        //  @return {string}
        //  @example newString = "Hello"
        //  @example 
        //  @example result = newString.width
        //  @example 
        //  print(result); // Outputs: <width=50%>Hello</width>     
    string.width = function(hSize = "50%")
        return "<width=" + hSize + ">" + self + "</width>"
    end function      


//Extended number object methods
    //@name plus
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".plus" as plus
        //  * NumberObject -> plus : number
        //  * plus -> NumberObject : (number + 1)
        //  * NumberObject -> plus : number(7)
        //  * plus -> NumberObject : (number + 7)        
        //  * footer
        //  * number.plus
        //  * endfooter         
        //  * @enduml           
        // ANCHOR number.plus

        //  **Description:**
        //  Keeps a number within a specified range
        //  @description     
        //  @param {number} min - The mix threshold.
        //  @param {number} max - The max threshold.
        //  @return {number | null} - The result of the addition.
        //  @example newNumber = 40
        //  @example 
        //  @example result = newNumber.plus(2);
        //  @example
        //  print(result); // Outputs: 42
    number.clamp = function(min, max)
        if not typeof(min) == "number" then return null
        if not typeof(max) == "number" then return null
            if self < min then return min
            if self > max then return max
            return self
    end function

    number.lerp = function(min, max, offset)
        if offset > 1 then offset = 1
        if offset < 0 then offset = 0
        difference = max - min
        scaled_difference = offset * difference
        return min + scaled_difference
    end function

    //@name plus
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".plus" as plus
        //  * NumberObject -> plus : number
        //  * plus -> NumberObject : (number + 1)
        //  * NumberObject -> plus : number(7)
        //  * plus -> NumberObject : (number + 7)        
        //  * footer
        //  * number.plus
        //  * endfooter         
        //  * @enduml           
        // ANCHOR number.plus

        //  **Description:**
        //  Add 1 to the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to add.
        //  @return {number | null} - The result of the addition.
        //  @example newNumber = 40
        //  @example 
        //  @example result = newNumber.plus(2);
        //  @example
        //  print(result); // Outputs: 42
    number.plus = function(amount = 1)
        if not typeof(amount) == "number" then return null
            return self + amount
    end function

    //@name minus
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".minus" as minus
        //  * NumberObject -> minus : number
        //  * minus -> NumberObject : (number - 1)
        //  * NumberObject -> minus : number(7)
        //  * minus -> NumberObject : (number - 7)        
        //  * footer
        //  * number.minus
        //  * endfooter         
        //  * @enduml         
        // ANCHOR number.minus  

        //  **Description:**
        //  Subtract 1 from the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to add.
        //  @return {number | null} - The result of the subtraction.
        //  @example newNumber = 44
        //  @example 
        //  @example result = newNumber.minus(2)
        //  @example        
        //  print(result); // Outputs: 42
    number.minus = function(amount = 1)
        if not typeof(amount) == "number" then return null
            return self - amount
    end function

    //@name multiply
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".multiply" as multiply
        //  * NumberObject -> multiply : number
        //  * multiply -> NumberObject : (number * 2)
        //  * NumberObject -> multiply : number(6)
        //  * multiply -> NumberObject : (number * 6)        
        //  * footer
        //  * number.multiply
        //  * endfooter         
        //  * @enduml         
        // ANCHOR number.multiply  

        //  **Description:**
        //  Multiply 2 from the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to multiply by.
        //  @return {number | null} - The result of the multiplication.
        //  @example newNumber = 22
        //  @example 
        //  @example result = newNumber.multiply
        //  @example        
        //  print(result); // Outputs: 42
        //  @example result2 = newNumber.multiply(3)
        //  @example        
        //  print(result2); // Outputs: 66        
    number.multiply = function(amount = 2)
        if not typeof(amount) == "number" then return null
            return self * amount
    end function

    //@name divide
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".divide" as divide
        //  * NumberObject -> divide : number
        //  * divide -> NumberObject : (number / 2)
        //  * NumberObject -> divide : number(4)
        //  * divide -> NumberObject : (number / 4)        
        //  * footer
        //  * number.divide
        //  * endfooter         
        //  * @enduml         
        // ANCHOR number.divide  

        //  **Description:**
        //  Divide 2 from the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to divide by.
        //  @return {number | null} - The result of the division.
        //  @example newNumber = 84
        //  @example 
        //  @example result = newNumber.divide
        //  @example        
        //  print(result); // Outputs: 42       
    number.divide = function(amount = 2)
        if not amount == 0 then return null
        if not typeof(amount) == "number" then return null
            return self * amount
    end function    

    //@name diff
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".diff" as diff
        //  * NumberObject -> diff : <i>[2]</i>number(44)
        //  * diff -> NumberObject : number[42]     
        //  * footer
        //  * number.diff
        //  * endfooter         
        //  * @enduml   
        // ANCHOR number.diff  

        //  **Description:**
        //  Return difference to number
        //  @param {number} amount
        //  @return {number | null} - The result of the subtraction.
        //  @example newNumber = 44
        //  @example newNumber2 = 2   
        //  @example       
        //  @example result = newNumber.diff(newNumber2)
        //  @example
        //  print(result); // Outputs: 42          
    number.diff = function(distanceTo = 0)
        if not typeof(distanceTo) == "number" then return null
            return abs(self - distanceTo)
    end function

    //@name is_more   
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".greater_than" as greater_than
        //  * NumberObject -> greater_than : number
        //  * greater_than -> NumberObject : [true / false]     
        //  * footer
        //  * number.greater_than
        //  * endfooter         
        //  * @enduml 
        // ANCHOR number.greater_than    

        //  **Description:**
        //  Check if number is greater than provided number
        //  @param {number} is_more
        //  @return {bool number | null} - The result of the subtraction.
        //  @example myNumber = 42;
        //  @example myNumber2 = 100;
        //  @example 
        //  @example result = newNumber.is_more(myNumber2);
        //  @example        
        //  print(result); // Outputs: false
    number.is_more = function(is_more)
        if not typeof(is_more) == "number" then return null
            if is_more > self then return true
            return false
    end function

    //@name is_less   
        //  * @startuml
        //  * entity NumberObject
        //  * control ".lesser_than" as lesser_than
        //  *   NumberObject -> lesser_than : number
        //  *   lesser_than -> NumberObject : [true / false]     
        //  * footer
        //  *   number.lesser_than
        //  * endfooter         
        //  * @enduml 
        // ANCHOR number.lesser_than  
        
        //  **Description:**
        //  Check if number is lesser than provided number   
        //  @param {number} amount
        //  @return {number [0 or 1] | null} - The result of the subtraction.
        //  @example myNumber = 42;
        //  @example myNumber2 = 100;
        //  @example 
        //  @example result = newNumber.is_less(myNumber2);
        //  @example
        //  print(result); // Outputs: false
    number.is_less = function(is_less)
        if not typeof(is_less) == "number" then return null
            if is_less < self then return true
            return false
    end function

    //@name random_from
        //  * @startuml
        //  * entity NumberObject
        //  * control ".random_from" as random_from
        //  *   NumberObject -> random_from : number
        //  *   random_from -> NumberObject : [random number in range]     
        //  * footer
        //  *   number.random_from([opt:min])
        //  * endfooter         
        //  * @enduml        
        // ANCHOR number.random_from

        //  **Description:**
        //  Generate a random number from 0 to number or optional minimum
        //  @param {number} [min]
        //  @return {number | null} - The result of the subtraction.
        //  @example myNumber = 100;
        //  @example 
        //  @example result = myNumber.random_from(50);
        //  @example
        //  print(result); // Outputs: {rnd:50-100}
    number.random_from = function(min = 0)
        if not typeof(min) == "number" then return null
            max = self
            return floor((rnd * (max - min + 1)) + min)  
    end function

    number.saturate = function(x)
        if x > 1 then x = 1
        if x < 0 then x = 0
        return x
    end function
    
//LIST FUNCTIONS
    //@name trim
        //  * @startuml
        //  * entity ListObject
        //  * control ".trim" as trim
        //  *   ListObject -> trim : [//""//,//""//,"item1", "item2", //""//]
        //  *   trim -> ListObject : ["item1", "item2"]
        //  * footer
        //  *   list.trim
        //  * endfooter         
        //  * @enduml        
        // ANCHOR list.trim

        //  **Description:**
        //  Trims a <list>
        //  @return {string} 
        //  @example myList = ["","","cat","dog",""];
        //  @example 
        //  @example result = myList.trim
        //  @example
        //  print(result); // Outputs: ["cat","dog"]
    list.trim = function()
        while not self[self.len - 1].len > 0
            self.remove(self.len - 1)
        end while
        while not self[0].len > 0
            self.remove(0)
        end while
        return self
    end function

    //@name print
        //  * @startuml
        //  * entity ListObject
        //  * interface ScreenOutput
        //  * control ".print" as print
        //  *   ListObject -> print : list
        //  *   print -> ScreenOutput : print()
        //  * footer
        //  *   list.print
        //  * endfooter         
        //  * @enduml        
        // ANCHOR list.print

        //  **Description:**
        //  Prints a list
        //  @return {void} 
        //  @example myList = ["cat","dog"]
        //  @example myList.print
        //  @example
        //  @example // Outputs:
        //  @example      cat
        //  @example      dog
        //  @example 
        //  @example myList = ["cat","dog"]
        //  @example myList.print(", ")
        //  @example
        //  @example // Outputs:
        //  @example      cat, dog    
    list.print = function(seperator = char(10))
        printString = split(self, seperator)
        print printString
    end function